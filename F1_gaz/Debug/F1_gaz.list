
F1_gaz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000fb4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080010c0  080010d8  000110d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000014  080010c0  080010c0  000110c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080010d4  080010d4  000110d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  000110d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000c0  20000000  080010d8  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  200000c0  080010d8  000200c0  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000110d8  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000b5f5  00000000  00000000  00011101  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000bd6  00000000  00000000  0001c6f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000003b8  00000000  00000000  0001d2d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000380  00000000  00000000  0001d688  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000016c9  00000000  00000000  0001da08  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000c952  00000000  00000000  0001f0d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002ba23  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00007888  00000000  00000000  0002baa0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      000001ed  00000000  00000000  00033328  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	080010a8 	.word	0x080010a8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	080010a8 	.word	0x080010a8

0800014c <_Z10Clock_initv>:
#include "RCC.hpp"

void Clock_init(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	 RCC-> CR = 0x00000000; 			//CR Reset
 8000150:	4b33      	ldr	r3, [pc, #204]	; (8000220 <_Z10Clock_initv+0xd4>)
 8000152:	2200      	movs	r2, #0
 8000154:	601a      	str	r2, [r3, #0]
	 RCC-> CR |= 0x00010000;			//HSE enable
 8000156:	4a32      	ldr	r2, [pc, #200]	; (8000220 <_Z10Clock_initv+0xd4>)
 8000158:	4b31      	ldr	r3, [pc, #196]	; (8000220 <_Z10Clock_initv+0xd4>)
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000160:	6013      	str	r3, [r2, #0]
	 while(!(RCC-> CR & 0x00020000));	//HSE FLAG control
 8000162:	4b2f      	ldr	r3, [pc, #188]	; (8000220 <_Z10Clock_initv+0xd4>)
 8000164:	681b      	ldr	r3, [r3, #0]
 8000166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800016a:	2b00      	cmp	r3, #0
 800016c:	bf0c      	ite	eq
 800016e:	2301      	moveq	r3, #1
 8000170:	2300      	movne	r3, #0
 8000172:	b2db      	uxtb	r3, r3
 8000174:	2b00      	cmp	r3, #0
 8000176:	d000      	beq.n	800017a <_Z10Clock_initv+0x2e>
 8000178:	e7f3      	b.n	8000162 <_Z10Clock_initv+0x16>
	 RCC-> CR |= 0x00080000;			//CSS enable
 800017a:	4a29      	ldr	r2, [pc, #164]	; (8000220 <_Z10Clock_initv+0xd4>)
 800017c:	4b28      	ldr	r3, [pc, #160]	; (8000220 <_Z10Clock_initv+0xd4>)
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000184:	6013      	str	r3, [r2, #0]
	 RCC-> CR |= 0x01000000;			//PLL On
 8000186:	4a26      	ldr	r2, [pc, #152]	; (8000220 <_Z10Clock_initv+0xd4>)
 8000188:	4b25      	ldr	r3, [pc, #148]	; (8000220 <_Z10Clock_initv+0xd4>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000190:	6013      	str	r3, [r2, #0]
	 RCC-> CFGR |= 0x00010000;			//HSE Select PLL input
 8000192:	4a23      	ldr	r2, [pc, #140]	; (8000220 <_Z10Clock_initv+0xd4>)
 8000194:	4b22      	ldr	r3, [pc, #136]	; (8000220 <_Z10Clock_initv+0xd4>)
 8000196:	685b      	ldr	r3, [r3, #4]
 8000198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800019c:	6053      	str	r3, [r2, #4]
	 RCC-> CFGR |= 0x001C0000;			//PLL Multi With 9 = 72 Mhz
 800019e:	4a20      	ldr	r2, [pc, #128]	; (8000220 <_Z10Clock_initv+0xd4>)
 80001a0:	4b1f      	ldr	r3, [pc, #124]	; (8000220 <_Z10Clock_initv+0xd4>)
 80001a2:	685b      	ldr	r3, [r3, #4]
 80001a4:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 80001a8:	6053      	str	r3, [r2, #4]
	 RCC-> CFGR |= 0x00000002;			//PLL Select as SYSCLK
 80001aa:	4a1d      	ldr	r2, [pc, #116]	; (8000220 <_Z10Clock_initv+0xd4>)
 80001ac:	4b1c      	ldr	r3, [pc, #112]	; (8000220 <_Z10Clock_initv+0xd4>)
 80001ae:	685b      	ldr	r3, [r3, #4]
 80001b0:	f043 0302 	orr.w	r3, r3, #2
 80001b4:	6053      	str	r3, [r2, #4]
	 RCC-> CFGR |= 0x00000400;			//APB1 Clock divided by 2
 80001b6:	4a1a      	ldr	r2, [pc, #104]	; (8000220 <_Z10Clock_initv+0xd4>)
 80001b8:	4b19      	ldr	r3, [pc, #100]	; (8000220 <_Z10Clock_initv+0xd4>)
 80001ba:	685b      	ldr	r3, [r3, #4]
 80001bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001c0:	6053      	str	r3, [r2, #4]

	 RCC-> APB1ENR |= 0x18000000;		//APB1 BKP Clock Enable
 80001c2:	4a17      	ldr	r2, [pc, #92]	; (8000220 <_Z10Clock_initv+0xd4>)
 80001c4:	4b16      	ldr	r3, [pc, #88]	; (8000220 <_Z10Clock_initv+0xd4>)
 80001c6:	69db      	ldr	r3, [r3, #28]
 80001c8:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
 80001cc:	61d3      	str	r3, [r2, #28]
	 PWR-> CR |= 0x0100;				//PWR BKP Access Enable
 80001ce:	4a15      	ldr	r2, [pc, #84]	; (8000224 <_Z10Clock_initv+0xd8>)
 80001d0:	4b14      	ldr	r3, [pc, #80]	; (8000224 <_Z10Clock_initv+0xd8>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80001d8:	6013      	str	r3, [r2, #0]

	 RCC-> APB2ENR |= 0x000001FC;		//All GPIO Port Clocks Enable
 80001da:	4a11      	ldr	r2, [pc, #68]	; (8000220 <_Z10Clock_initv+0xd4>)
 80001dc:	4b10      	ldr	r3, [pc, #64]	; (8000220 <_Z10Clock_initv+0xd4>)
 80001de:	699b      	ldr	r3, [r3, #24]
 80001e0:	f443 73fe 	orr.w	r3, r3, #508	; 0x1fc
 80001e4:	6193      	str	r3, [r2, #24]

	 RCC-> APB2ENR |= 0x00000001;		//APB2 AFIO Clock Enable
 80001e6:	4a0e      	ldr	r2, [pc, #56]	; (8000220 <_Z10Clock_initv+0xd4>)
 80001e8:	4b0d      	ldr	r3, [pc, #52]	; (8000220 <_Z10Clock_initv+0xd4>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	f043 0301 	orr.w	r3, r3, #1
 80001f0:	6193      	str	r3, [r2, #24]

	 RCC-> APB1ENR |= 0x00000001;		//APB1 TIM2 Clock Enable
 80001f2:	4a0b      	ldr	r2, [pc, #44]	; (8000220 <_Z10Clock_initv+0xd4>)
 80001f4:	4b0a      	ldr	r3, [pc, #40]	; (8000220 <_Z10Clock_initv+0xd4>)
 80001f6:	69db      	ldr	r3, [r3, #28]
 80001f8:	f043 0301 	orr.w	r3, r3, #1
 80001fc:	61d3      	str	r3, [r2, #28]

	SysTick-> LOAD = 0;
 80001fe:	4b0a      	ldr	r3, [pc, #40]	; (8000228 <_Z10Clock_initv+0xdc>)
 8000200:	2200      	movs	r2, #0
 8000202:	605a      	str	r2, [r3, #4]
	SysTick-> LOAD = 71999;				//Systick Load is 167,999 (168 Million Pulse each second/ 167,999 pulse = 1 milisecond)
 8000204:	4b08      	ldr	r3, [pc, #32]	; (8000228 <_Z10Clock_initv+0xdc>)
 8000206:	4a09      	ldr	r2, [pc, #36]	; (800022c <_Z10Clock_initv+0xe0>)
 8000208:	605a      	str	r2, [r3, #4]

	SysTick-> CTRL|= 0x00000007;		//Systick Clock Source AHB(Processor Clock), SysTick Interrupt Enable, Systick Enable
 800020a:	4a07      	ldr	r2, [pc, #28]	; (8000228 <_Z10Clock_initv+0xdc>)
 800020c:	4b06      	ldr	r3, [pc, #24]	; (8000228 <_Z10Clock_initv+0xdc>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	f043 0307 	orr.w	r3, r3, #7
 8000214:	6013      	str	r3, [r2, #0]
}
 8000216:	bf00      	nop
 8000218:	46bd      	mov	sp, r7
 800021a:	bc80      	pop	{r7}
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	40021000 	.word	0x40021000
 8000224:	40007000 	.word	0x40007000
 8000228:	e000e010 	.word	0xe000e010
 800022c:	0001193f 	.word	0x0001193f

08000230 <_Z8Set_GpioP12GPIO_TypeDefhhhhh>:
#include "GPIO.hpp"

void Set_Gpio(GPIO_TypeDef *Gpio_Port, uint8_t Pin, uint8_t Mode=OUTPUT, uint8_t Config=PUSH, uint8_t Speed=MED, uint8_t Pupdr=NOT){
 8000230:	b480      	push	{r7}
 8000232:	b085      	sub	sp, #20
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
 8000238:	4608      	mov	r0, r1
 800023a:	4611      	mov	r1, r2
 800023c:	461a      	mov	r2, r3
 800023e:	4603      	mov	r3, r0
 8000240:	70fb      	strb	r3, [r7, #3]
 8000242:	460b      	mov	r3, r1
 8000244:	70bb      	strb	r3, [r7, #2]
 8000246:	4613      	mov	r3, r2
 8000248:	707b      	strb	r3, [r7, #1]

	uint8_t gpio_field=0;
 800024a:	2300      	movs	r3, #0
 800024c:	73fb      	strb	r3, [r7, #15]

		 if(Mode == OUTPUT) {gpio_field = (((Mode-1)<<2)+(Config<<2)+Speed);}
 800024e:	78bb      	ldrb	r3, [r7, #2]
 8000250:	2b01      	cmp	r3, #1
 8000252:	d10d      	bne.n	8000270 <_Z8Set_GpioP12GPIO_TypeDefhhhhh+0x40>
 8000254:	78bb      	ldrb	r3, [r7, #2]
 8000256:	3b01      	subs	r3, #1
 8000258:	b2db      	uxtb	r3, r3
 800025a:	009b      	lsls	r3, r3, #2
 800025c:	b2da      	uxtb	r2, r3
 800025e:	787b      	ldrb	r3, [r7, #1]
 8000260:	009b      	lsls	r3, r3, #2
 8000262:	b2db      	uxtb	r3, r3
 8000264:	4413      	add	r3, r2
 8000266:	b2da      	uxtb	r2, r3
 8000268:	7e3b      	ldrb	r3, [r7, #24]
 800026a:	4413      	add	r3, r2
 800026c:	73fb      	strb	r3, [r7, #15]
 800026e:	e037      	b.n	80002e0 <_Z8Set_GpioP12GPIO_TypeDefhhhhh+0xb0>
	else if(Mode == ALTER ) {gpio_field = ((Mode<<2)+(Config<<2)+Speed);}
 8000270:	78bb      	ldrb	r3, [r7, #2]
 8000272:	2b02      	cmp	r3, #2
 8000274:	d10b      	bne.n	800028e <_Z8Set_GpioP12GPIO_TypeDefhhhhh+0x5e>
 8000276:	78bb      	ldrb	r3, [r7, #2]
 8000278:	009b      	lsls	r3, r3, #2
 800027a:	b2da      	uxtb	r2, r3
 800027c:	787b      	ldrb	r3, [r7, #1]
 800027e:	009b      	lsls	r3, r3, #2
 8000280:	b2db      	uxtb	r3, r3
 8000282:	4413      	add	r3, r2
 8000284:	b2da      	uxtb	r2, r3
 8000286:	7e3b      	ldrb	r3, [r7, #24]
 8000288:	4413      	add	r3, r2
 800028a:	73fb      	strb	r3, [r7, #15]
 800028c:	e028      	b.n	80002e0 <_Z8Set_GpioP12GPIO_TypeDefhhhhh+0xb0>
	else if(Mode == INPUT ) {gpio_field = ((Mode<<2)+(Config<<2));}
 800028e:	78bb      	ldrb	r3, [r7, #2]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d108      	bne.n	80002a6 <_Z8Set_GpioP12GPIO_TypeDefhhhhh+0x76>
 8000294:	78bb      	ldrb	r3, [r7, #2]
 8000296:	009b      	lsls	r3, r3, #2
 8000298:	b2da      	uxtb	r2, r3
 800029a:	787b      	ldrb	r3, [r7, #1]
 800029c:	009b      	lsls	r3, r3, #2
 800029e:	b2db      	uxtb	r3, r3
 80002a0:	4413      	add	r3, r2
 80002a2:	73fb      	strb	r3, [r7, #15]
 80002a4:	e01c      	b.n	80002e0 <_Z8Set_GpioP12GPIO_TypeDefhhhhh+0xb0>

	else if(Mode == INPUT_R && Pupdr == UP)	{gpio_field = ((Mode-1)<<3); Gpio_Port-> ODR |= (1<<Pin);}
 80002a6:	78bb      	ldrb	r3, [r7, #2]
 80002a8:	2b03      	cmp	r3, #3
 80002aa:	d111      	bne.n	80002d0 <_Z8Set_GpioP12GPIO_TypeDefhhhhh+0xa0>
 80002ac:	7f3b      	ldrb	r3, [r7, #28]
 80002ae:	2b01      	cmp	r3, #1
 80002b0:	d10e      	bne.n	80002d0 <_Z8Set_GpioP12GPIO_TypeDefhhhhh+0xa0>
 80002b2:	78bb      	ldrb	r3, [r7, #2]
 80002b4:	3b01      	subs	r3, #1
 80002b6:	b2db      	uxtb	r3, r3
 80002b8:	00db      	lsls	r3, r3, #3
 80002ba:	73fb      	strb	r3, [r7, #15]
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	68db      	ldr	r3, [r3, #12]
 80002c0:	78fa      	ldrb	r2, [r7, #3]
 80002c2:	2101      	movs	r1, #1
 80002c4:	fa01 f202 	lsl.w	r2, r1, r2
 80002c8:	431a      	orrs	r2, r3
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	60da      	str	r2, [r3, #12]
 80002ce:	e007      	b.n	80002e0 <_Z8Set_GpioP12GPIO_TypeDefhhhhh+0xb0>
	else if(Mode == INPUT_R)					{gpio_field = (((Mode-1)<<3));}
 80002d0:	78bb      	ldrb	r3, [r7, #2]
 80002d2:	2b03      	cmp	r3, #3
 80002d4:	d104      	bne.n	80002e0 <_Z8Set_GpioP12GPIO_TypeDefhhhhh+0xb0>
 80002d6:	78bb      	ldrb	r3, [r7, #2]
 80002d8:	3b01      	subs	r3, #1
 80002da:	b2db      	uxtb	r3, r3
 80002dc:	00db      	lsls	r3, r3, #3
 80002de:	73fb      	strb	r3, [r7, #15]

	if(Pin<8){
 80002e0:	78fb      	ldrb	r3, [r7, #3]
 80002e2:	2b07      	cmp	r3, #7
 80002e4:	dc1e      	bgt.n	8000324 <_Z8Set_GpioP12GPIO_TypeDefhhhhh+0xf4>
		Gpio_Port-> CRL |= (0xF<<(Pin*4));
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	78fa      	ldrb	r2, [r7, #3]
 80002ec:	0092      	lsls	r2, r2, #2
 80002ee:	210f      	movs	r1, #15
 80002f0:	fa01 f202 	lsl.w	r2, r1, r2
 80002f4:	431a      	orrs	r2, r3
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	601a      	str	r2, [r3, #0]
		Gpio_Port-> CRL ^= (0xF<<(Pin*4));
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	78fa      	ldrb	r2, [r7, #3]
 8000300:	0092      	lsls	r2, r2, #2
 8000302:	210f      	movs	r1, #15
 8000304:	fa01 f202 	lsl.w	r2, r1, r2
 8000308:	405a      	eors	r2, r3
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	601a      	str	r2, [r3, #0]
		Gpio_Port-> CRL |= (gpio_field<<(Pin*4));
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	7bf9      	ldrb	r1, [r7, #15]
 8000314:	78fa      	ldrb	r2, [r7, #3]
 8000316:	0092      	lsls	r2, r2, #2
 8000318:	fa01 f202 	lsl.w	r2, r1, r2
 800031c:	431a      	orrs	r2, r3
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	601a      	str	r2, [r3, #0]
	else{
		Gpio_Port-> CRH |= (0xF<<((Pin-8)*4));
		Gpio_Port-> CRH ^= (0xF<<((Pin-8)*4));
		Gpio_Port-> CRH |= (gpio_field<<((Pin-8)*4));
	}
}
 8000322:	e020      	b.n	8000366 <_Z8Set_GpioP12GPIO_TypeDefhhhhh+0x136>
		Gpio_Port-> CRH |= (0xF<<((Pin-8)*4));
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	685b      	ldr	r3, [r3, #4]
 8000328:	78fa      	ldrb	r2, [r7, #3]
 800032a:	3a08      	subs	r2, #8
 800032c:	0092      	lsls	r2, r2, #2
 800032e:	210f      	movs	r1, #15
 8000330:	fa01 f202 	lsl.w	r2, r1, r2
 8000334:	431a      	orrs	r2, r3
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	605a      	str	r2, [r3, #4]
		Gpio_Port-> CRH ^= (0xF<<((Pin-8)*4));
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	685b      	ldr	r3, [r3, #4]
 800033e:	78fa      	ldrb	r2, [r7, #3]
 8000340:	3a08      	subs	r2, #8
 8000342:	0092      	lsls	r2, r2, #2
 8000344:	210f      	movs	r1, #15
 8000346:	fa01 f202 	lsl.w	r2, r1, r2
 800034a:	405a      	eors	r2, r3
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	605a      	str	r2, [r3, #4]
		Gpio_Port-> CRH |= (gpio_field<<((Pin-8)*4));
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	685b      	ldr	r3, [r3, #4]
 8000354:	7bf9      	ldrb	r1, [r7, #15]
 8000356:	78fa      	ldrb	r2, [r7, #3]
 8000358:	3a08      	subs	r2, #8
 800035a:	0092      	lsls	r2, r2, #2
 800035c:	fa01 f202 	lsl.w	r2, r1, r2
 8000360:	431a      	orrs	r2, r3
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	605a      	str	r2, [r3, #4]
}
 8000366:	bf00      	nop
 8000368:	3714      	adds	r7, #20
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr

08000370 <_Z12Set_Gpio_PinP12GPIO_TypeDefhh>:

void Set_Gpio_Pin(GPIO_TypeDef *Gpio_Port, uint8_t Pin, uint8_t set_reset){
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
 8000378:	460b      	mov	r3, r1
 800037a:	70fb      	strb	r3, [r7, #3]
 800037c:	4613      	mov	r3, r2
 800037e:	70bb      	strb	r3, [r7, #2]

	if(set_reset == 1){
 8000380:	78bb      	ldrb	r3, [r7, #2]
 8000382:	2b01      	cmp	r3, #1
 8000384:	d109      	bne.n	800039a <_Z12Set_Gpio_PinP12GPIO_TypeDefhh+0x2a>
		Gpio_Port-> ODR |= (1<<Pin);
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	68db      	ldr	r3, [r3, #12]
 800038a:	78fa      	ldrb	r2, [r7, #3]
 800038c:	2101      	movs	r1, #1
 800038e:	fa01 f202 	lsl.w	r2, r1, r2
 8000392:	431a      	orrs	r2, r3
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	60da      	str	r2, [r3, #12]
	}
	else if(set_reset == 0){
		Gpio_Port-> ODR &= (0<<Pin);
	}
}
 8000398:	e007      	b.n	80003aa <_Z12Set_Gpio_PinP12GPIO_TypeDefhh+0x3a>
	else if(set_reset == 0){
 800039a:	78bb      	ldrb	r3, [r7, #2]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d104      	bne.n	80003aa <_Z12Set_Gpio_PinP12GPIO_TypeDefhh+0x3a>
		Gpio_Port-> ODR &= (0<<Pin);
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	68db      	ldr	r3, [r3, #12]
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	2200      	movs	r2, #0
 80003a8:	60da      	str	r2, [r3, #12]
}
 80003aa:	bf00      	nop
 80003ac:	370c      	adds	r7, #12
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr

080003b4 <_ZNSt12_Base_bitsetILj1EEC1Ey>:
      _GLIBCXX_CONSTEXPR _Base_bitset() _GLIBCXX_NOEXCEPT
      : _M_w(0)
      { }

#if __cplusplus >= 201103L
      constexpr _Base_bitset(unsigned long long __val) noexcept
 80003b4:	b480      	push	{r7}
 80003b6:	b085      	sub	sp, #20
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	60f8      	str	r0, [r7, #12]
 80003bc:	e9c7 2300 	strd	r2, r3, [r7]
#else
      _Base_bitset(unsigned long __val)
#endif
      : _M_w(__val)
 80003c0:	683a      	ldr	r2, [r7, #0]
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	601a      	str	r2, [r3, #0]
      { }
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	4618      	mov	r0, r3
 80003ca:	3714      	adds	r7, #20
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bc80      	pop	{r7}
 80003d0:	4770      	bx	lr

080003d2 <_ZNSt12_Base_bitsetILj1EE11_S_whichbitEj>:
      static _GLIBCXX_CONSTEXPR size_t
      _S_whichbyte(size_t __pos) _GLIBCXX_NOEXCEPT
      { return (__pos % _GLIBCXX_BITSET_BITS_PER_WORD) / __CHAR_BIT__; }

      static _GLIBCXX_CONSTEXPR size_t
      _S_whichbit(size_t __pos) _GLIBCXX_NOEXCEPT
 80003d2:	b480      	push	{r7}
 80003d4:	b083      	sub	sp, #12
 80003d6:	af00      	add	r7, sp, #0
 80003d8:	6078      	str	r0, [r7, #4]
      {  return __pos % _GLIBCXX_BITSET_BITS_PER_WORD; }
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	f003 031f 	and.w	r3, r3, #31
 80003e0:	4618      	mov	r0, r3
 80003e2:	370c      	adds	r7, #12
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bc80      	pop	{r7}
 80003e8:	4770      	bx	lr

080003ea <_ZNSt12_Base_bitsetILj1EE10_S_maskbitEj>:

      static _GLIBCXX_CONSTEXPR _WordT
      _S_maskbit(size_t __pos) _GLIBCXX_NOEXCEPT
 80003ea:	b580      	push	{r7, lr}
 80003ec:	b082      	sub	sp, #8
 80003ee:	af00      	add	r7, sp, #0
 80003f0:	6078      	str	r0, [r7, #4]
      { return (static_cast<_WordT>(1)) << _S_whichbit(__pos); }
 80003f2:	6878      	ldr	r0, [r7, #4]
 80003f4:	f7ff ffed 	bl	80003d2 <_ZNSt12_Base_bitsetILj1EE11_S_whichbitEj>
 80003f8:	4602      	mov	r2, r0
 80003fa:	2301      	movs	r3, #1
 80003fc:	4093      	lsls	r3, r2
 80003fe:	4618      	mov	r0, r3
 8000400:	3708      	adds	r7, #8
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}

08000406 <_ZNSt12_Base_bitsetILj1EE10_M_getwordEj>:

      _WordT&
      _M_getword(size_t) _GLIBCXX_NOEXCEPT
 8000406:	b480      	push	{r7}
 8000408:	b083      	sub	sp, #12
 800040a:	af00      	add	r7, sp, #0
 800040c:	6078      	str	r0, [r7, #4]
 800040e:	6039      	str	r1, [r7, #0]
      { return _M_w; }
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	4618      	mov	r0, r3
 8000414:	370c      	adds	r7, #12
 8000416:	46bd      	mov	sp, r7
 8000418:	bc80      	pop	{r7}
 800041a:	4770      	bx	lr

0800041c <_ZN10Timer_BaseC1Ehmm>:
	uint8_t MOE_Status;
	uint8_t Timer;
	public:
	TIM_TypeDef *Timerx;

	Timer_Base(uint8_t const TimerXn, uint32_t Prescaler_Value, uint32_t ARR_Value){
 800041c:	b480      	push	{r7}
 800041e:	b085      	sub	sp, #20
 8000420:	af00      	add	r7, sp, #0
 8000422:	60f8      	str	r0, [r7, #12]
 8000424:	607a      	str	r2, [r7, #4]
 8000426:	603b      	str	r3, [r7, #0]
 8000428:	460b      	mov	r3, r1
 800042a:	72fb      	strb	r3, [r7, #11]
		Timer = TimerXn;
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	7afa      	ldrb	r2, [r7, #11]
 8000430:	705a      	strb	r2, [r3, #1]
		switch (TimerXn){
 8000432:	7afb      	ldrb	r3, [r7, #11]
 8000434:	3b01      	subs	r3, #1
 8000436:	2b0d      	cmp	r3, #13
 8000438:	f200 80ad 	bhi.w	8000596 <_ZN10Timer_BaseC1Ehmm+0x17a>
 800043c:	a201      	add	r2, pc, #4	; (adr r2, 8000444 <_ZN10Timer_BaseC1Ehmm+0x28>)
 800043e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000442:	bf00      	nop
 8000444:	0800047d 	.word	0x0800047d
 8000448:	08000491 	.word	0x08000491
 800044c:	080004a7 	.word	0x080004a7
 8000450:	080004bb 	.word	0x080004bb
 8000454:	080004cf 	.word	0x080004cf
 8000458:	080004e3 	.word	0x080004e3
 800045c:	080004f7 	.word	0x080004f7
 8000460:	0800050b 	.word	0x0800050b
 8000464:	0800051f 	.word	0x0800051f
 8000468:	08000533 	.word	0x08000533
 800046c:	08000547 	.word	0x08000547
 8000470:	0800055b 	.word	0x0800055b
 8000474:	0800056f 	.word	0x0800056f
 8000478:	08000583 	.word	0x08000583
		 case TIM_1:
			 Timerx = ((TIM_TypeDef *) TIM1_BASE);
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	4a4e      	ldr	r2, [pc, #312]	; (80005b8 <_ZN10Timer_BaseC1Ehmm+0x19c>)
 8000480:	605a      	str	r2, [r3, #4]
			 RCC-> APB2ENR |= 0x00000800;
 8000482:	4a4e      	ldr	r2, [pc, #312]	; (80005bc <_ZN10Timer_BaseC1Ehmm+0x1a0>)
 8000484:	4b4d      	ldr	r3, [pc, #308]	; (80005bc <_ZN10Timer_BaseC1Ehmm+0x1a0>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800048c:	6193      	str	r3, [r2, #24]
			 break;
 800048e:	e083      	b.n	8000598 <_ZN10Timer_BaseC1Ehmm+0x17c>
		 case TIM_2:
			 Timerx = ((TIM_TypeDef *) TIM2_BASE);
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000496:	605a      	str	r2, [r3, #4]
			 RCC-> APB1ENR |= 0x00000001;
 8000498:	4a48      	ldr	r2, [pc, #288]	; (80005bc <_ZN10Timer_BaseC1Ehmm+0x1a0>)
 800049a:	4b48      	ldr	r3, [pc, #288]	; (80005bc <_ZN10Timer_BaseC1Ehmm+0x1a0>)
 800049c:	69db      	ldr	r3, [r3, #28]
 800049e:	f043 0301 	orr.w	r3, r3, #1
 80004a2:	61d3      	str	r3, [r2, #28]
		 	 break;
 80004a4:	e078      	b.n	8000598 <_ZN10Timer_BaseC1Ehmm+0x17c>
		 case TIM_3:
			 Timerx = ((TIM_TypeDef *) TIM3_BASE);
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	4a45      	ldr	r2, [pc, #276]	; (80005c0 <_ZN10Timer_BaseC1Ehmm+0x1a4>)
 80004aa:	605a      	str	r2, [r3, #4]
			 RCC-> APB1ENR |= 0x00000002;
 80004ac:	4a43      	ldr	r2, [pc, #268]	; (80005bc <_ZN10Timer_BaseC1Ehmm+0x1a0>)
 80004ae:	4b43      	ldr	r3, [pc, #268]	; (80005bc <_ZN10Timer_BaseC1Ehmm+0x1a0>)
 80004b0:	69db      	ldr	r3, [r3, #28]
 80004b2:	f043 0302 	orr.w	r3, r3, #2
 80004b6:	61d3      	str	r3, [r2, #28]
			 break;
 80004b8:	e06e      	b.n	8000598 <_ZN10Timer_BaseC1Ehmm+0x17c>
		 case TIM_4:
			 Timerx = ((TIM_TypeDef *) TIM4_BASE);
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	4a41      	ldr	r2, [pc, #260]	; (80005c4 <_ZN10Timer_BaseC1Ehmm+0x1a8>)
 80004be:	605a      	str	r2, [r3, #4]
			 RCC-> APB1ENR |= 0x00000004;
 80004c0:	4a3e      	ldr	r2, [pc, #248]	; (80005bc <_ZN10Timer_BaseC1Ehmm+0x1a0>)
 80004c2:	4b3e      	ldr	r3, [pc, #248]	; (80005bc <_ZN10Timer_BaseC1Ehmm+0x1a0>)
 80004c4:	69db      	ldr	r3, [r3, #28]
 80004c6:	f043 0304 	orr.w	r3, r3, #4
 80004ca:	61d3      	str	r3, [r2, #28]
			 break;
 80004cc:	e064      	b.n	8000598 <_ZN10Timer_BaseC1Ehmm+0x17c>
		 case TIM_5:
			 Timerx = ((TIM_TypeDef *) TIM5_BASE);
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	4a3d      	ldr	r2, [pc, #244]	; (80005c8 <_ZN10Timer_BaseC1Ehmm+0x1ac>)
 80004d2:	605a      	str	r2, [r3, #4]
			 RCC-> APB1ENR |= 0x00000008;
 80004d4:	4a39      	ldr	r2, [pc, #228]	; (80005bc <_ZN10Timer_BaseC1Ehmm+0x1a0>)
 80004d6:	4b39      	ldr	r3, [pc, #228]	; (80005bc <_ZN10Timer_BaseC1Ehmm+0x1a0>)
 80004d8:	69db      	ldr	r3, [r3, #28]
 80004da:	f043 0308 	orr.w	r3, r3, #8
 80004de:	61d3      	str	r3, [r2, #28]
			 break;
 80004e0:	e05a      	b.n	8000598 <_ZN10Timer_BaseC1Ehmm+0x17c>
		 case TIM_6:
			 Timerx = ((TIM_TypeDef *) TIM6_BASE);
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	4a39      	ldr	r2, [pc, #228]	; (80005cc <_ZN10Timer_BaseC1Ehmm+0x1b0>)
 80004e6:	605a      	str	r2, [r3, #4]
			 RCC-> APB1ENR |= 0x00000010;
 80004e8:	4a34      	ldr	r2, [pc, #208]	; (80005bc <_ZN10Timer_BaseC1Ehmm+0x1a0>)
 80004ea:	4b34      	ldr	r3, [pc, #208]	; (80005bc <_ZN10Timer_BaseC1Ehmm+0x1a0>)
 80004ec:	69db      	ldr	r3, [r3, #28]
 80004ee:	f043 0310 	orr.w	r3, r3, #16
 80004f2:	61d3      	str	r3, [r2, #28]
			 break;
 80004f4:	e050      	b.n	8000598 <_ZN10Timer_BaseC1Ehmm+0x17c>
		 case TIM_7:
			 Timerx = ((TIM_TypeDef *) TIM7_BASE);
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	4a35      	ldr	r2, [pc, #212]	; (80005d0 <_ZN10Timer_BaseC1Ehmm+0x1b4>)
 80004fa:	605a      	str	r2, [r3, #4]
			 RCC-> APB1ENR |= 0x00000020;
 80004fc:	4a2f      	ldr	r2, [pc, #188]	; (80005bc <_ZN10Timer_BaseC1Ehmm+0x1a0>)
 80004fe:	4b2f      	ldr	r3, [pc, #188]	; (80005bc <_ZN10Timer_BaseC1Ehmm+0x1a0>)
 8000500:	69db      	ldr	r3, [r3, #28]
 8000502:	f043 0320 	orr.w	r3, r3, #32
 8000506:	61d3      	str	r3, [r2, #28]
			 break;
 8000508:	e046      	b.n	8000598 <_ZN10Timer_BaseC1Ehmm+0x17c>
		 case TIM_8:
			 Timerx = ((TIM_TypeDef *) TIM8_BASE);
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	4a31      	ldr	r2, [pc, #196]	; (80005d4 <_ZN10Timer_BaseC1Ehmm+0x1b8>)
 800050e:	605a      	str	r2, [r3, #4]
			 RCC-> APB2ENR |= 0x00002000;
 8000510:	4a2a      	ldr	r2, [pc, #168]	; (80005bc <_ZN10Timer_BaseC1Ehmm+0x1a0>)
 8000512:	4b2a      	ldr	r3, [pc, #168]	; (80005bc <_ZN10Timer_BaseC1Ehmm+0x1a0>)
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800051a:	6193      	str	r3, [r2, #24]
			 break;
 800051c:	e03c      	b.n	8000598 <_ZN10Timer_BaseC1Ehmm+0x17c>
		 case TIM_9:
			 Timerx = ((TIM_TypeDef *) TIM9_BASE);
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	4a2d      	ldr	r2, [pc, #180]	; (80005d8 <_ZN10Timer_BaseC1Ehmm+0x1bc>)
 8000522:	605a      	str	r2, [r3, #4]
			 RCC-> APB2ENR |= 0x00080000;
 8000524:	4a25      	ldr	r2, [pc, #148]	; (80005bc <_ZN10Timer_BaseC1Ehmm+0x1a0>)
 8000526:	4b25      	ldr	r3, [pc, #148]	; (80005bc <_ZN10Timer_BaseC1Ehmm+0x1a0>)
 8000528:	699b      	ldr	r3, [r3, #24]
 800052a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800052e:	6193      	str	r3, [r2, #24]
			 break;
 8000530:	e032      	b.n	8000598 <_ZN10Timer_BaseC1Ehmm+0x17c>
		 case TIM_10:
			 Timerx = ((TIM_TypeDef *) TIM10_BASE);
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	4a29      	ldr	r2, [pc, #164]	; (80005dc <_ZN10Timer_BaseC1Ehmm+0x1c0>)
 8000536:	605a      	str	r2, [r3, #4]
			 RCC-> APB2ENR |= 0x00100000;
 8000538:	4a20      	ldr	r2, [pc, #128]	; (80005bc <_ZN10Timer_BaseC1Ehmm+0x1a0>)
 800053a:	4b20      	ldr	r3, [pc, #128]	; (80005bc <_ZN10Timer_BaseC1Ehmm+0x1a0>)
 800053c:	699b      	ldr	r3, [r3, #24]
 800053e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000542:	6193      	str	r3, [r2, #24]
			 break;
 8000544:	e028      	b.n	8000598 <_ZN10Timer_BaseC1Ehmm+0x17c>
		 case TIM_11:
			 Timerx = ((TIM_TypeDef *) TIM11_BASE);
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	4a25      	ldr	r2, [pc, #148]	; (80005e0 <_ZN10Timer_BaseC1Ehmm+0x1c4>)
 800054a:	605a      	str	r2, [r3, #4]
			 RCC-> APB2ENR |= 0x00200000;
 800054c:	4a1b      	ldr	r2, [pc, #108]	; (80005bc <_ZN10Timer_BaseC1Ehmm+0x1a0>)
 800054e:	4b1b      	ldr	r3, [pc, #108]	; (80005bc <_ZN10Timer_BaseC1Ehmm+0x1a0>)
 8000550:	699b      	ldr	r3, [r3, #24]
 8000552:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000556:	6193      	str	r3, [r2, #24]
			 break;
 8000558:	e01e      	b.n	8000598 <_ZN10Timer_BaseC1Ehmm+0x17c>
		 case TIM_12:
			 Timerx = ((TIM_TypeDef *) TIM12_BASE);
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	4a21      	ldr	r2, [pc, #132]	; (80005e4 <_ZN10Timer_BaseC1Ehmm+0x1c8>)
 800055e:	605a      	str	r2, [r3, #4]
			 RCC-> APB1ENR |= 0x00000040;
 8000560:	4a16      	ldr	r2, [pc, #88]	; (80005bc <_ZN10Timer_BaseC1Ehmm+0x1a0>)
 8000562:	4b16      	ldr	r3, [pc, #88]	; (80005bc <_ZN10Timer_BaseC1Ehmm+0x1a0>)
 8000564:	69db      	ldr	r3, [r3, #28]
 8000566:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800056a:	61d3      	str	r3, [r2, #28]
			 break;
 800056c:	e014      	b.n	8000598 <_ZN10Timer_BaseC1Ehmm+0x17c>
		 case TIM_13:
			 Timerx = ((TIM_TypeDef *) TIM13_BASE);
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	4a1d      	ldr	r2, [pc, #116]	; (80005e8 <_ZN10Timer_BaseC1Ehmm+0x1cc>)
 8000572:	605a      	str	r2, [r3, #4]
			 RCC-> APB1ENR |= 0x00000080;
 8000574:	4a11      	ldr	r2, [pc, #68]	; (80005bc <_ZN10Timer_BaseC1Ehmm+0x1a0>)
 8000576:	4b11      	ldr	r3, [pc, #68]	; (80005bc <_ZN10Timer_BaseC1Ehmm+0x1a0>)
 8000578:	69db      	ldr	r3, [r3, #28]
 800057a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800057e:	61d3      	str	r3, [r2, #28]
			 break;
 8000580:	e00a      	b.n	8000598 <_ZN10Timer_BaseC1Ehmm+0x17c>
		 case TIM_14:
			 Timerx = ((TIM_TypeDef *) TIM14_BASE);
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	4a19      	ldr	r2, [pc, #100]	; (80005ec <_ZN10Timer_BaseC1Ehmm+0x1d0>)
 8000586:	605a      	str	r2, [r3, #4]
			 RCC-> APB1ENR |= 0x00000100;
 8000588:	4a0c      	ldr	r2, [pc, #48]	; (80005bc <_ZN10Timer_BaseC1Ehmm+0x1a0>)
 800058a:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <_ZN10Timer_BaseC1Ehmm+0x1a0>)
 800058c:	69db      	ldr	r3, [r3, #28]
 800058e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000592:	61d3      	str	r3, [r2, #28]
			 break;
 8000594:	e000      	b.n	8000598 <_ZN10Timer_BaseC1Ehmm+0x17c>
		 default:
			 while(1);
 8000596:	e7fe      	b.n	8000596 <_ZN10Timer_BaseC1Ehmm+0x17a>
		}

		Timerx-> ARR = ARR_Value;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	683a      	ldr	r2, [r7, #0]
 800059e:	b292      	uxth	r2, r2
 80005a0:	859a      	strh	r2, [r3, #44]	; 0x2c
		Timerx-> PSC = Prescaler_Value;
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	685b      	ldr	r3, [r3, #4]
 80005a6:	687a      	ldr	r2, [r7, #4]
 80005a8:	b292      	uxth	r2, r2
 80005aa:	851a      	strh	r2, [r3, #40]	; 0x28
	}
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	4618      	mov	r0, r3
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr
 80005b8:	40012c00 	.word	0x40012c00
 80005bc:	40021000 	.word	0x40021000
 80005c0:	40000400 	.word	0x40000400
 80005c4:	40000800 	.word	0x40000800
 80005c8:	40000c00 	.word	0x40000c00
 80005cc:	40001000 	.word	0x40001000
 80005d0:	40001400 	.word	0x40001400
 80005d4:	40013400 	.word	0x40013400
 80005d8:	40014c00 	.word	0x40014c00
 80005dc:	40015000 	.word	0x40015000
 80005e0:	40015400 	.word	0x40015400
 80005e4:	40001800 	.word	0x40001800
 80005e8:	40001c00 	.word	0x40001c00
 80005ec:	40002000 	.word	0x40002000

080005f0 <_ZN10Timer_Base13Counter_StartEv>:
	void Counter_Start();
	void PWM(uint8_t CH, uint8_t Pwm_mode);
	void Pulse_Generator(uint32_t ARR_Val);
};

void Timer_Base::Counter_Start(){
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	Timerx-> CR1 |= 0x0001;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	685b      	ldr	r3, [r3, #4]
 80005fc:	687a      	ldr	r2, [r7, #4]
 80005fe:	6852      	ldr	r2, [r2, #4]
 8000600:	8812      	ldrh	r2, [r2, #0]
 8000602:	b292      	uxth	r2, r2
 8000604:	f042 0201 	orr.w	r2, r2, #1
 8000608:	b292      	uxth	r2, r2
 800060a:	801a      	strh	r2, [r3, #0]
}
 800060c:	bf00      	nop
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	bc80      	pop	{r7}
 8000614:	4770      	bx	lr

08000616 <_ZNSt13_Sanitize_valILj4ELb1EE18_S_do_sanitize_valEy>:

  template<size_t _Nb>
    struct _Sanitize_val<_Nb, true>
    {
      static constexpr unsigned long long
      _S_do_sanitize_val(unsigned long long __val)
 8000616:	b490      	push	{r4, r7}
 8000618:	b082      	sub	sp, #8
 800061a:	af00      	add	r7, sp, #0
 800061c:	e9c7 0100 	strd	r0, r1, [r7]
      { return __val & ~((~static_cast<unsigned long long>(0)) << _Nb); }
 8000620:	e897 0018 	ldmia.w	r7, {r3, r4}
 8000624:	f04f 010f 	mov.w	r1, #15
 8000628:	f04f 0200 	mov.w	r2, #0
 800062c:	ea03 0301 	and.w	r3, r3, r1
 8000630:	ea04 0402 	and.w	r4, r4, r2
 8000634:	4618      	mov	r0, r3
 8000636:	4621      	mov	r1, r4
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bc90      	pop	{r4, r7}
 800063e:	4770      	bx	lr

08000640 <_ZNSt6bitsetILj4EEC1Ey>:
      _GLIBCXX_CONSTEXPR bitset() _GLIBCXX_NOEXCEPT
      { }

      /// Initial bits bitwise-copied from a single word (others set to zero).
#if __cplusplus >= 201103L
      constexpr bitset(unsigned long long __val) noexcept
 8000640:	b590      	push	{r4, r7, lr}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	e9c7 2300 	strd	r2, r3, [r7]
      : _Base(_Sanitize_val<_Nb>::_S_do_sanitize_val(__val)) { }
 800064c:	68fc      	ldr	r4, [r7, #12]
 800064e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000652:	f7ff ffe0 	bl	8000616 <_ZNSt13_Sanitize_valILj4ELb1EE18_S_do_sanitize_valEy>
 8000656:	4602      	mov	r2, r0
 8000658:	460b      	mov	r3, r1
 800065a:	4620      	mov	r0, r4
 800065c:	f7ff feaa 	bl	80003b4 <_ZNSt12_Base_bitsetILj1EEC1Ey>
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	4618      	mov	r0, r3
 8000664:	3714      	adds	r7, #20
 8000666:	46bd      	mov	sp, r7
 8000668:	bd90      	pop	{r4, r7, pc}
	...

0800066c <_ZN10Timer_Base3PWMEhh>:

void Timer_Base::PWM(uint8_t CH, uint8_t Pwm_mode){
 800066c:	b5b0      	push	{r4, r5, r7, lr}
 800066e:	b088      	sub	sp, #32
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	460b      	mov	r3, r1
 8000676:	70fb      	strb	r3, [r7, #3]
 8000678:	4613      	mov	r3, r2
 800067a:	70bb      	strb	r3, [r7, #2]

	if(Timer < 6 || Timer == 8){
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	785b      	ldrb	r3, [r3, #1]
 8000680:	2b05      	cmp	r3, #5
 8000682:	dd03      	ble.n	800068c <_ZN10Timer_Base3PWMEhh+0x20>
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	785b      	ldrb	r3, [r3, #1]
 8000688:	2b08      	cmp	r3, #8
 800068a:	d103      	bne.n	8000694 <_ZN10Timer_Base3PWMEhh+0x28>
		if(CH > 15){ while(1);}
 800068c:	78fb      	ldrb	r3, [r7, #3]
 800068e:	2b0f      	cmp	r3, #15
 8000690:	dd29      	ble.n	80006e6 <_ZN10Timer_Base3PWMEhh+0x7a>
 8000692:	e7fe      	b.n	8000692 <_ZN10Timer_Base3PWMEhh+0x26>
	}
	else if(Timer == 6 || Timer == 7) while(1);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	785b      	ldrb	r3, [r3, #1]
 8000698:	2b06      	cmp	r3, #6
 800069a:	d003      	beq.n	80006a4 <_ZN10Timer_Base3PWMEhh+0x38>
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	785b      	ldrb	r3, [r3, #1]
 80006a0:	2b07      	cmp	r3, #7
 80006a2:	d100      	bne.n	80006a6 <_ZN10Timer_Base3PWMEhh+0x3a>
 80006a4:	e7fe      	b.n	80006a4 <_ZN10Timer_Base3PWMEhh+0x38>
	else if(Timer == 9 || Timer == 12){
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	785b      	ldrb	r3, [r3, #1]
 80006aa:	2b09      	cmp	r3, #9
 80006ac:	d003      	beq.n	80006b6 <_ZN10Timer_Base3PWMEhh+0x4a>
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	785b      	ldrb	r3, [r3, #1]
 80006b2:	2b0c      	cmp	r3, #12
 80006b4:	d103      	bne.n	80006be <_ZN10Timer_Base3PWMEhh+0x52>
		if(CH > 2){  while(1);}
 80006b6:	78fb      	ldrb	r3, [r7, #3]
 80006b8:	2b02      	cmp	r3, #2
 80006ba:	dd14      	ble.n	80006e6 <_ZN10Timer_Base3PWMEhh+0x7a>
 80006bc:	e7fe      	b.n	80006bc <_ZN10Timer_Base3PWMEhh+0x50>
	}
	else if(Timer == 10 || Timer == 11 || Timer == 13 || Timer == 14){
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	785b      	ldrb	r3, [r3, #1]
 80006c2:	2b0a      	cmp	r3, #10
 80006c4:	d00b      	beq.n	80006de <_ZN10Timer_Base3PWMEhh+0x72>
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	785b      	ldrb	r3, [r3, #1]
 80006ca:	2b0b      	cmp	r3, #11
 80006cc:	d007      	beq.n	80006de <_ZN10Timer_Base3PWMEhh+0x72>
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	785b      	ldrb	r3, [r3, #1]
 80006d2:	2b0d      	cmp	r3, #13
 80006d4:	d003      	beq.n	80006de <_ZN10Timer_Base3PWMEhh+0x72>
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	785b      	ldrb	r3, [r3, #1]
 80006da:	2b0e      	cmp	r3, #14
 80006dc:	d103      	bne.n	80006e6 <_ZN10Timer_Base3PWMEhh+0x7a>
		if(CH > 1){  while(1);}
 80006de:	78fb      	ldrb	r3, [r7, #3]
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	dd00      	ble.n	80006e6 <_ZN10Timer_Base3PWMEhh+0x7a>
 80006e4:	e7fe      	b.n	80006e4 <_ZN10Timer_Base3PWMEhh+0x78>
	}

	std::bitset<4> channel (CH);
 80006e6:	78fb      	ldrb	r3, [r7, #3]
 80006e8:	f04f 0400 	mov.w	r4, #0
 80006ec:	f107 0108 	add.w	r1, r7, #8
 80006f0:	461a      	mov	r2, r3
 80006f2:	4623      	mov	r3, r4
 80006f4:	4608      	mov	r0, r1
 80006f6:	f7ff ffa3 	bl	8000640 <_ZNSt6bitsetILj4EEC1Ey>

    for(uint8_t i=0;i<4;i++){
 80006fa:	2300      	movs	r3, #0
 80006fc:	77fb      	strb	r3, [r7, #31]
 80006fe:	7ffb      	ldrb	r3, [r7, #31]
 8000700:	2b03      	cmp	r3, #3
 8000702:	f300 8092 	bgt.w	800082a <_ZN10Timer_Base3PWMEhh+0x1be>
        if(channel[i] == 1 && i<2){
 8000706:	7ffa      	ldrb	r2, [r7, #31]
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	f107 0108 	add.w	r1, r7, #8
 8000710:	4618      	mov	r0, r3
 8000712:	f000 fa0b 	bl	8000b2c <_ZNSt6bitsetILj4EEixEj>
 8000716:	2501      	movs	r5, #1
 8000718:	f107 030c 	add.w	r3, r7, #12
 800071c:	4618      	mov	r0, r3
 800071e:	f000 fa1e 	bl	8000b5e <_ZNKSt6bitsetILj4EE9referencecvbEv>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d004      	beq.n	8000732 <_ZN10Timer_Base3PWMEhh+0xc6>
 8000728:	7ffb      	ldrb	r3, [r7, #31]
 800072a:	2b01      	cmp	r3, #1
 800072c:	dc01      	bgt.n	8000732 <_ZN10Timer_Base3PWMEhh+0xc6>
 800072e:	2401      	movs	r4, #1
 8000730:	e000      	b.n	8000734 <_ZN10Timer_Base3PWMEhh+0xc8>
 8000732:	2400      	movs	r4, #0
 8000734:	2d00      	cmp	r5, #0
 8000736:	d005      	beq.n	8000744 <_ZN10Timer_Base3PWMEhh+0xd8>
 8000738:	bf00      	nop
 800073a:	f107 030c 	add.w	r3, r7, #12
 800073e:	4618      	mov	r0, r3
 8000740:	f000 fa03 	bl	8000b4a <_ZNSt6bitsetILj4EE9referenceD1Ev>
 8000744:	2c00      	cmp	r4, #0
 8000746:	d025      	beq.n	8000794 <_ZN10Timer_Base3PWMEhh+0x128>
            Timerx-> CCMR1 |= ((((Pwm_mode)<<4)+(0x8))<<(8*i));
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	685b      	ldr	r3, [r3, #4]
 800074c:	687a      	ldr	r2, [r7, #4]
 800074e:	6852      	ldr	r2, [r2, #4]
 8000750:	8b12      	ldrh	r2, [r2, #24]
 8000752:	b292      	uxth	r2, r2
 8000754:	b211      	sxth	r1, r2
 8000756:	78ba      	ldrb	r2, [r7, #2]
 8000758:	0112      	lsls	r2, r2, #4
 800075a:	f102 0008 	add.w	r0, r2, #8
 800075e:	7ffa      	ldrb	r2, [r7, #31]
 8000760:	00d2      	lsls	r2, r2, #3
 8000762:	fa00 f202 	lsl.w	r2, r0, r2
 8000766:	b212      	sxth	r2, r2
 8000768:	430a      	orrs	r2, r1
 800076a:	b212      	sxth	r2, r2
 800076c:	b292      	uxth	r2, r2
 800076e:	831a      	strh	r2, [r3, #24]
            Timerx-> CCER  |= (1<<(i*4));
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	6852      	ldr	r2, [r2, #4]
 8000778:	8c12      	ldrh	r2, [r2, #32]
 800077a:	b292      	uxth	r2, r2
 800077c:	b211      	sxth	r1, r2
 800077e:	7ffa      	ldrb	r2, [r7, #31]
 8000780:	0092      	lsls	r2, r2, #2
 8000782:	2001      	movs	r0, #1
 8000784:	fa00 f202 	lsl.w	r2, r0, r2
 8000788:	b212      	sxth	r2, r2
 800078a:	430a      	orrs	r2, r1
 800078c:	b212      	sxth	r2, r2
 800078e:	b292      	uxth	r2, r2
 8000790:	841a      	strh	r2, [r3, #32]
 8000792:	e046      	b.n	8000822 <_ZN10Timer_Base3PWMEhh+0x1b6>
        }
        else if(channel[i] == 1 && i>1){
 8000794:	7ffa      	ldrb	r2, [r7, #31]
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	f107 0108 	add.w	r1, r7, #8
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 f9c4 	bl	8000b2c <_ZNSt6bitsetILj4EEixEj>
 80007a4:	2501      	movs	r5, #1
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 f9d7 	bl	8000b5e <_ZNKSt6bitsetILj4EE9referencecvbEv>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d004      	beq.n	80007c0 <_ZN10Timer_Base3PWMEhh+0x154>
 80007b6:	7ffb      	ldrb	r3, [r7, #31]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	dd01      	ble.n	80007c0 <_ZN10Timer_Base3PWMEhh+0x154>
 80007bc:	2401      	movs	r4, #1
 80007be:	e000      	b.n	80007c2 <_ZN10Timer_Base3PWMEhh+0x156>
 80007c0:	2400      	movs	r4, #0
 80007c2:	2d00      	cmp	r5, #0
 80007c4:	d005      	beq.n	80007d2 <_ZN10Timer_Base3PWMEhh+0x166>
 80007c6:	bf00      	nop
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 f9bc 	bl	8000b4a <_ZNSt6bitsetILj4EE9referenceD1Ev>
 80007d2:	2c00      	cmp	r4, #0
 80007d4:	d025      	beq.n	8000822 <_ZN10Timer_Base3PWMEhh+0x1b6>
        	Timerx-> CCMR2 |= ((((Pwm_mode)<<4)+(0x8))<<(8*(i-2)));
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	6852      	ldr	r2, [r2, #4]
 80007de:	8b92      	ldrh	r2, [r2, #28]
 80007e0:	b292      	uxth	r2, r2
 80007e2:	b211      	sxth	r1, r2
 80007e4:	78ba      	ldrb	r2, [r7, #2]
 80007e6:	0112      	lsls	r2, r2, #4
 80007e8:	f102 0008 	add.w	r0, r2, #8
 80007ec:	7ffa      	ldrb	r2, [r7, #31]
 80007ee:	3a02      	subs	r2, #2
 80007f0:	00d2      	lsls	r2, r2, #3
 80007f2:	fa00 f202 	lsl.w	r2, r0, r2
 80007f6:	b212      	sxth	r2, r2
 80007f8:	430a      	orrs	r2, r1
 80007fa:	b212      	sxth	r2, r2
 80007fc:	b292      	uxth	r2, r2
 80007fe:	839a      	strh	r2, [r3, #28]
            Timerx-> CCER  |= (1<<(i*4));
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	685b      	ldr	r3, [r3, #4]
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	6852      	ldr	r2, [r2, #4]
 8000808:	8c12      	ldrh	r2, [r2, #32]
 800080a:	b292      	uxth	r2, r2
 800080c:	b211      	sxth	r1, r2
 800080e:	7ffa      	ldrb	r2, [r7, #31]
 8000810:	0092      	lsls	r2, r2, #2
 8000812:	2001      	movs	r0, #1
 8000814:	fa00 f202 	lsl.w	r2, r0, r2
 8000818:	b212      	sxth	r2, r2
 800081a:	430a      	orrs	r2, r1
 800081c:	b212      	sxth	r2, r2
 800081e:	b292      	uxth	r2, r2
 8000820:	841a      	strh	r2, [r3, #32]
    for(uint8_t i=0;i<4;i++){
 8000822:	7ffb      	ldrb	r3, [r7, #31]
 8000824:	3301      	adds	r3, #1
 8000826:	77fb      	strb	r3, [r7, #31]
 8000828:	e769      	b.n	80006fe <_ZN10Timer_Base3PWMEhh+0x92>
        }
    }

    if(Timer == 8 || Timer == 1){
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	785b      	ldrb	r3, [r3, #1]
 800082e:	2b08      	cmp	r3, #8
 8000830:	d003      	beq.n	800083a <_ZN10Timer_Base3PWMEhh+0x1ce>
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	785b      	ldrb	r3, [r3, #1]
 8000836:	2b01      	cmp	r3, #1
 8000838:	d10b      	bne.n	8000852 <_ZN10Timer_Base3PWMEhh+0x1e6>
    	Timerx-> BDTR |= 0xA000;		//Main Output Enable (MOE) and Break Polarity Active High
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	685a      	ldr	r2, [r3, #4]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000846:	b299      	uxth	r1, r3
 8000848:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <_ZN10Timer_Base3PWMEhh+0x208>)
 800084a:	430b      	orrs	r3, r1
 800084c:	b29b      	uxth	r3, r3
 800084e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    }

	Timerx -> CR1   |= 0x0080;			//Auto Reload Preload (ARPE) Enable
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	6852      	ldr	r2, [r2, #4]
 800085a:	8812      	ldrh	r2, [r2, #0]
 800085c:	b292      	uxth	r2, r2
 800085e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000862:	b292      	uxth	r2, r2
 8000864:	801a      	strh	r2, [r3, #0]

	Counter_Start();
 8000866:	6878      	ldr	r0, [r7, #4]
 8000868:	f7ff fec2 	bl	80005f0 <_ZN10Timer_Base13Counter_StartEv>
}
 800086c:	bf00      	nop
 800086e:	3720      	adds	r7, #32
 8000870:	46bd      	mov	sp, r7
 8000872:	bdb0      	pop	{r4, r5, r7, pc}
 8000874:	ffffa000 	.word	0xffffa000

08000878 <SysTick_Handler>:
void delay(int count){
	Systick_counter = count;
	while(Systick_counter != 0);
}

extern "C" {void SysTick_Handler(void){
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
	if(Systick_counter > 0){Systick_counter--;}
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <SysTick_Handler+0x20>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d004      	beq.n	800088e <SysTick_Handler+0x16>
 8000884:	4b04      	ldr	r3, [pc, #16]	; (8000898 <SysTick_Handler+0x20>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	3b01      	subs	r3, #1
 800088a:	4a03      	ldr	r2, [pc, #12]	; (8000898 <SysTick_Handler+0x20>)
 800088c:	6013      	str	r3, [r2, #0]
}}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	2000001c 	.word	0x2000001c

0800089c <_ZN8ADC_BaseC1E7adc_numP12GPIO_TypeDefh>:
#include "ADC.hpp"

class ADC_Base{
	public:
	ADC_TypeDef	*ADCx;
	ADC_Base(adc_num adc, GPIO_TypeDef *GPIO_port, uint8_t Pin){
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af02      	add	r7, sp, #8
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	607a      	str	r2, [r7, #4]
 80008a6:	461a      	mov	r2, r3
 80008a8:	460b      	mov	r3, r1
 80008aa:	72fb      	strb	r3, [r7, #11]
 80008ac:	4613      	mov	r3, r2
 80008ae:	72bb      	strb	r3, [r7, #10]

		if(adc==ADC_1){
 80008b0:	7afb      	ldrb	r3, [r7, #11]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d109      	bne.n	80008ca <_ZN8ADC_BaseC1E7adc_numP12GPIO_TypeDefh+0x2e>
			ADCx = ((ADC_TypeDef*) ADC1_BASE);
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	4a39      	ldr	r2, [pc, #228]	; (80009a0 <_ZN8ADC_BaseC1E7adc_numP12GPIO_TypeDefh+0x104>)
 80008ba:	601a      	str	r2, [r3, #0]
			RCC-> APB2ENR |= 0x00000200;			//ADC 1 Clock Enable
 80008bc:	4a39      	ldr	r2, [pc, #228]	; (80009a4 <_ZN8ADC_BaseC1E7adc_numP12GPIO_TypeDefh+0x108>)
 80008be:	4b39      	ldr	r3, [pc, #228]	; (80009a4 <_ZN8ADC_BaseC1E7adc_numP12GPIO_TypeDefh+0x108>)
 80008c0:	699b      	ldr	r3, [r3, #24]
 80008c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008c6:	6193      	str	r3, [r2, #24]
 80008c8:	e052      	b.n	8000970 <_ZN8ADC_BaseC1E7adc_numP12GPIO_TypeDefh+0xd4>
		}
		else if(adc==ADC_2){
 80008ca:	7afb      	ldrb	r3, [r7, #11]
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d109      	bne.n	80008e4 <_ZN8ADC_BaseC1E7adc_numP12GPIO_TypeDefh+0x48>
			ADCx = ((ADC_TypeDef*) ADC2_BASE);
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	4a35      	ldr	r2, [pc, #212]	; (80009a8 <_ZN8ADC_BaseC1E7adc_numP12GPIO_TypeDefh+0x10c>)
 80008d4:	601a      	str	r2, [r3, #0]
			RCC-> APB2ENR |= 0x00000400;			//ADC 2 Clock Enable
 80008d6:	4a33      	ldr	r2, [pc, #204]	; (80009a4 <_ZN8ADC_BaseC1E7adc_numP12GPIO_TypeDefh+0x108>)
 80008d8:	4b32      	ldr	r3, [pc, #200]	; (80009a4 <_ZN8ADC_BaseC1E7adc_numP12GPIO_TypeDefh+0x108>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008e0:	6193      	str	r3, [r2, #24]
 80008e2:	e045      	b.n	8000970 <_ZN8ADC_BaseC1E7adc_numP12GPIO_TypeDefh+0xd4>
		}
		else if(adc==ADC_3){
 80008e4:	7afb      	ldrb	r3, [r7, #11]
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	d11d      	bne.n	8000926 <_ZN8ADC_BaseC1E7adc_numP12GPIO_TypeDefh+0x8a>
			if(((GPIO_port == GPIOA) || (GPIO_port == GPIOC)) && ((Pin == 0) || (Pin == 1) || (Pin == 2) || (Pin == 3))){
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4a2f      	ldr	r2, [pc, #188]	; (80009ac <_ZN8ADC_BaseC1E7adc_numP12GPIO_TypeDefh+0x110>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d003      	beq.n	80008fa <_ZN8ADC_BaseC1E7adc_numP12GPIO_TypeDefh+0x5e>
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4a2e      	ldr	r2, [pc, #184]	; (80009b0 <_ZN8ADC_BaseC1E7adc_numP12GPIO_TypeDefh+0x114>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d13a      	bne.n	8000970 <_ZN8ADC_BaseC1E7adc_numP12GPIO_TypeDefh+0xd4>
 80008fa:	7abb      	ldrb	r3, [r7, #10]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d008      	beq.n	8000912 <_ZN8ADC_BaseC1E7adc_numP12GPIO_TypeDefh+0x76>
 8000900:	7abb      	ldrb	r3, [r7, #10]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d005      	beq.n	8000912 <_ZN8ADC_BaseC1E7adc_numP12GPIO_TypeDefh+0x76>
 8000906:	7abb      	ldrb	r3, [r7, #10]
 8000908:	2b02      	cmp	r3, #2
 800090a:	d002      	beq.n	8000912 <_ZN8ADC_BaseC1E7adc_numP12GPIO_TypeDefh+0x76>
 800090c:	7abb      	ldrb	r3, [r7, #10]
 800090e:	2b03      	cmp	r3, #3
 8000910:	d12e      	bne.n	8000970 <_ZN8ADC_BaseC1E7adc_numP12GPIO_TypeDefh+0xd4>
				ADCx = ((ADC_TypeDef*) ADC3_BASE);
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	4a27      	ldr	r2, [pc, #156]	; (80009b4 <_ZN8ADC_BaseC1E7adc_numP12GPIO_TypeDefh+0x118>)
 8000916:	601a      	str	r2, [r3, #0]
				RCC-> APB2ENR |= 0x00008000;		//ADC 3 Clock Enable
 8000918:	4a22      	ldr	r2, [pc, #136]	; (80009a4 <_ZN8ADC_BaseC1E7adc_numP12GPIO_TypeDefh+0x108>)
 800091a:	4b22      	ldr	r3, [pc, #136]	; (80009a4 <_ZN8ADC_BaseC1E7adc_numP12GPIO_TypeDefh+0x108>)
 800091c:	699b      	ldr	r3, [r3, #24]
 800091e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000922:	6193      	str	r3, [r2, #24]
 8000924:	e024      	b.n	8000970 <_ZN8ADC_BaseC1E7adc_numP12GPIO_TypeDefh+0xd4>
			}
		}
		else if(!((GPIO_port == GPIOA) || (GPIO_port == GPIOB) || (GPIO_port == GPIOC)) && !((Pin == 0) || (Pin == 1) || (Pin == 2) || (Pin == 3) || (Pin == 4) || (Pin == 5) || (Pin == 6) || (Pin == 7))){
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4a20      	ldr	r2, [pc, #128]	; (80009ac <_ZN8ADC_BaseC1E7adc_numP12GPIO_TypeDefh+0x110>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d020      	beq.n	8000970 <_ZN8ADC_BaseC1E7adc_numP12GPIO_TypeDefh+0xd4>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4a21      	ldr	r2, [pc, #132]	; (80009b8 <_ZN8ADC_BaseC1E7adc_numP12GPIO_TypeDefh+0x11c>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d01c      	beq.n	8000970 <_ZN8ADC_BaseC1E7adc_numP12GPIO_TypeDefh+0xd4>
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4a1d      	ldr	r2, [pc, #116]	; (80009b0 <_ZN8ADC_BaseC1E7adc_numP12GPIO_TypeDefh+0x114>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d018      	beq.n	8000970 <_ZN8ADC_BaseC1E7adc_numP12GPIO_TypeDefh+0xd4>
 800093e:	7abb      	ldrb	r3, [r7, #10]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d015      	beq.n	8000970 <_ZN8ADC_BaseC1E7adc_numP12GPIO_TypeDefh+0xd4>
 8000944:	7abb      	ldrb	r3, [r7, #10]
 8000946:	2b01      	cmp	r3, #1
 8000948:	d012      	beq.n	8000970 <_ZN8ADC_BaseC1E7adc_numP12GPIO_TypeDefh+0xd4>
 800094a:	7abb      	ldrb	r3, [r7, #10]
 800094c:	2b02      	cmp	r3, #2
 800094e:	d00f      	beq.n	8000970 <_ZN8ADC_BaseC1E7adc_numP12GPIO_TypeDefh+0xd4>
 8000950:	7abb      	ldrb	r3, [r7, #10]
 8000952:	2b03      	cmp	r3, #3
 8000954:	d00c      	beq.n	8000970 <_ZN8ADC_BaseC1E7adc_numP12GPIO_TypeDefh+0xd4>
 8000956:	7abb      	ldrb	r3, [r7, #10]
 8000958:	2b04      	cmp	r3, #4
 800095a:	d009      	beq.n	8000970 <_ZN8ADC_BaseC1E7adc_numP12GPIO_TypeDefh+0xd4>
 800095c:	7abb      	ldrb	r3, [r7, #10]
 800095e:	2b05      	cmp	r3, #5
 8000960:	d006      	beq.n	8000970 <_ZN8ADC_BaseC1E7adc_numP12GPIO_TypeDefh+0xd4>
 8000962:	7abb      	ldrb	r3, [r7, #10]
 8000964:	2b06      	cmp	r3, #6
 8000966:	d003      	beq.n	8000970 <_ZN8ADC_BaseC1E7adc_numP12GPIO_TypeDefh+0xd4>
 8000968:	7abb      	ldrb	r3, [r7, #10]
 800096a:	2b07      	cmp	r3, #7
 800096c:	d000      	beq.n	8000970 <_ZN8ADC_BaseC1E7adc_numP12GPIO_TypeDefh+0xd4>
			while(1);
 800096e:	e7fe      	b.n	800096e <_ZN8ADC_BaseC1E7adc_numP12GPIO_TypeDefh+0xd2>
		}
		Set_Gpio(GPIO_port,Pin,INPUT,ANALOG);
 8000970:	7ab9      	ldrb	r1, [r7, #10]
 8000972:	2300      	movs	r3, #0
 8000974:	9301      	str	r3, [sp, #4]
 8000976:	2301      	movs	r3, #1
 8000978:	9300      	str	r3, [sp, #0]
 800097a:	2300      	movs	r3, #0
 800097c:	2200      	movs	r2, #0
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f7ff fc56 	bl	8000230 <_Z8Set_GpioP12GPIO_TypeDefhhhhh>
		ADCx-> CR2 |= 0x00000001;					//ADC X Enable
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	68fa      	ldr	r2, [r7, #12]
 800098a:	6812      	ldr	r2, [r2, #0]
 800098c:	6892      	ldr	r2, [r2, #8]
 800098e:	f042 0201 	orr.w	r2, r2, #1
 8000992:	609a      	str	r2, [r3, #8]
	}
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	4618      	mov	r0, r3
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40012400 	.word	0x40012400
 80009a4:	40021000 	.word	0x40021000
 80009a8:	40012800 	.word	0x40012800
 80009ac:	40010800 	.word	0x40010800
 80009b0:	40011000 	.word	0x40011000
 80009b4:	40013c00 	.word	0x40013c00
 80009b8:	40010c00 	.word	0x40010c00

080009bc <_ZN8ADC_Base12ADC_ScanConvEv>:
	 uint16_t ADC_ScanConv();
	 uint16_t ADC_ScanConv(std::vector<uint16_t> &data);
	 uint16_t ADC_ContinuousConv();
};

uint16_t ADC_Base::ADC_ScanConv(){
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
//	ADCx-> CR1 |= 0x00000100;		//Scan Mode Enable
	ADCx-> SQR2|= 0x00000000;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	687a      	ldr	r2, [r7, #4]
 80009ca:	6812      	ldr	r2, [r2, #0]
 80009cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80009ce:	631a      	str	r2, [r3, #48]	; 0x30
	ADCx-> SQR1|= 0x00100000;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	687a      	ldr	r2, [r7, #4]
 80009d6:	6812      	ldr	r2, [r2, #0]
 80009d8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80009da:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80009de:	62da      	str	r2, [r3, #44]	; 0x2c
	ADCx-> SQR3|= 0x00000001;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	687a      	ldr	r2, [r7, #4]
 80009e6:	6812      	ldr	r2, [r2, #0]
 80009e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80009ea:	f042 0201 	orr.w	r2, r2, #1
 80009ee:	635a      	str	r2, [r3, #52]	; 0x34
	ADCx-> CR2 |= 0x000E0000;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	6812      	ldr	r2, [r2, #0]
 80009f8:	6892      	ldr	r2, [r2, #8]
 80009fa:	f442 2260 	orr.w	r2, r2, #917504	; 0xe0000
 80009fe:	609a      	str	r2, [r3, #8]
	ADCx-> CR2 |= 0x40000000;		//Regular conv start
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	687a      	ldr	r2, [r7, #4]
 8000a06:	6812      	ldr	r2, [r2, #0]
 8000a08:	6892      	ldr	r2, [r2, #8]
 8000a0a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000a0e:	609a      	str	r2, [r3, #8]
	return ADCx-> DR;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	b29b      	uxth	r3, r3
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bc80      	pop	{r7}
 8000a20:	4770      	bx	lr
	...

08000a24 <_Z11Gpio_Configv>:
#include "../Libs/GPIO.cpp"
#include "../Libs/Timers.cpp"
#include "../Libs/ADC.cpp"
#include "../Libs/LCD_i2c.cpp"

void Gpio_Config(){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af02      	add	r7, sp, #8
	Set_Gpio(GPIOA,8,ALTER,PUSH,MED,NOT);
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	9301      	str	r3, [sp, #4]
 8000a2e:	2301      	movs	r3, #1
 8000a30:	9300      	str	r3, [sp, #0]
 8000a32:	2300      	movs	r3, #0
 8000a34:	2202      	movs	r2, #2
 8000a36:	2108      	movs	r1, #8
 8000a38:	480a      	ldr	r0, [pc, #40]	; (8000a64 <_Z11Gpio_Configv+0x40>)
 8000a3a:	f7ff fbf9 	bl	8000230 <_Z8Set_GpioP12GPIO_TypeDefhhhhh>

	Set_Gpio(GPIOC,13,OUTPUT,PUSH,MED,NOT);
 8000a3e:	2300      	movs	r3, #0
 8000a40:	9301      	str	r3, [sp, #4]
 8000a42:	2301      	movs	r3, #1
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	2300      	movs	r3, #0
 8000a48:	2201      	movs	r2, #1
 8000a4a:	210d      	movs	r1, #13
 8000a4c:	4806      	ldr	r0, [pc, #24]	; (8000a68 <_Z11Gpio_Configv+0x44>)
 8000a4e:	f7ff fbef 	bl	8000230 <_Z8Set_GpioP12GPIO_TypeDefhhhhh>
	Set_Gpio_Pin(GPIOC,13,0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	210d      	movs	r1, #13
 8000a56:	4804      	ldr	r0, [pc, #16]	; (8000a68 <_Z11Gpio_Configv+0x44>)
 8000a58:	f7ff fc8a 	bl	8000370 <_Z12Set_Gpio_PinP12GPIO_TypeDefhh>
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40010800 	.word	0x40010800
 8000a68:	40011000 	.word	0x40011000

08000a6c <_Z5scalettttt>:

uint16_t scale(uint16_t data, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max){
 8000a6c:	b490      	push	{r4, r7}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4604      	mov	r4, r0
 8000a74:	4608      	mov	r0, r1
 8000a76:	4611      	mov	r1, r2
 8000a78:	461a      	mov	r2, r3
 8000a7a:	4623      	mov	r3, r4
 8000a7c:	80fb      	strh	r3, [r7, #6]
 8000a7e:	4603      	mov	r3, r0
 8000a80:	80bb      	strh	r3, [r7, #4]
 8000a82:	460b      	mov	r3, r1
 8000a84:	807b      	strh	r3, [r7, #2]
 8000a86:	4613      	mov	r3, r2
 8000a88:	803b      	strh	r3, [r7, #0]
	return (data-in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000a8a:	88fa      	ldrh	r2, [r7, #6]
 8000a8c:	88bb      	ldrh	r3, [r7, #4]
 8000a8e:	1ad3      	subs	r3, r2, r3
 8000a90:	8a39      	ldrh	r1, [r7, #16]
 8000a92:	883a      	ldrh	r2, [r7, #0]
 8000a94:	1a8a      	subs	r2, r1, r2
 8000a96:	fb02 f203 	mul.w	r2, r2, r3
 8000a9a:	8879      	ldrh	r1, [r7, #2]
 8000a9c:	88bb      	ldrh	r3, [r7, #4]
 8000a9e:	1acb      	subs	r3, r1, r3
 8000aa0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	883b      	ldrh	r3, [r7, #0]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	b29b      	uxth	r3, r3
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc90      	pop	{r4, r7}
 8000ab4:	4770      	bx	lr
	...

08000ab8 <main>:
#define PRE_SC 360-1			//PRE_SC / 72 = x uS tick
#define AUTO_R 5000-1
#define OUT_MIN 0
#define OUT_MAX 4600

int main(void){
 8000ab8:	b590      	push	{r4, r7, lr}
 8000aba:	b087      	sub	sp, #28
 8000abc:	af02      	add	r7, sp, #8

	uint16_t adc_data;

	Clock_init();
 8000abe:	f7ff fb45 	bl	800014c <_Z10Clock_initv>
	Gpio_Config();
 8000ac2:	f7ff ffaf 	bl	8000a24 <_Z11Gpio_Configv>

	ADC_Base pot(ADC_1,GPIOA,1);
 8000ac6:	f107 0008 	add.w	r0, r7, #8
 8000aca:	2301      	movs	r3, #1
 8000acc:	4a16      	ldr	r2, [pc, #88]	; (8000b28 <main+0x70>)
 8000ace:	2100      	movs	r1, #0
 8000ad0:	f7ff fee4 	bl	800089c <_ZN8ADC_BaseC1E7adc_numP12GPIO_TypeDefh>

	Timer_Base output(TIM_1,PRE_SC,AUTO_R);
 8000ad4:	4638      	mov	r0, r7
 8000ad6:	f241 3387 	movw	r3, #4999	; 0x1387
 8000ada:	f240 1267 	movw	r2, #359	; 0x167
 8000ade:	2101      	movs	r1, #1
 8000ae0:	f7ff fc9c 	bl	800041c <_ZN10Timer_BaseC1Ehmm>
	output.Timerx->CCR1 = 1;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	869a      	strh	r2, [r3, #52]	; 0x34
	output.PWM(1,PWM_1);
 8000aea:	463b      	mov	r3, r7
 8000aec:	2206      	movs	r2, #6
 8000aee:	2101      	movs	r1, #1
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff fdbb 	bl	800066c <_ZN10Timer_Base3PWMEhh>

//	lcd ekran(I2C1);
//	ekran.lcd_init();

	while (1){
		adc_data = pot.ADC_ScanConv();
 8000af6:	f107 0308 	add.w	r3, r7, #8
 8000afa:	4618      	mov	r0, r3
 8000afc:	f7ff ff5e 	bl	80009bc <_ZN8ADC_Base12ADC_ScanConvEv>
 8000b00:	4603      	mov	r3, r0
 8000b02:	81fb      	strh	r3, [r7, #14]

		output.Timerx->ARR = AUTO_R - scale(adc_data, 0, 4095, OUT_MIN, OUT_MAX);
 8000b04:	687c      	ldr	r4, [r7, #4]
 8000b06:	89f8      	ldrh	r0, [r7, #14]
 8000b08:	f241 13f8 	movw	r3, #4600	; 0x11f8
 8000b0c:	9300      	str	r3, [sp, #0]
 8000b0e:	2300      	movs	r3, #0
 8000b10:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000b14:	2100      	movs	r1, #0
 8000b16:	f7ff ffa9 	bl	8000a6c <_Z5scalettttt>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 8000b20:	3307      	adds	r3, #7
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	85a3      	strh	r3, [r4, #44]	; 0x2c
		adc_data = pot.ADC_ScanConv();
 8000b26:	e7e6      	b.n	8000af6 <main+0x3e>
 8000b28:	40010800 	.word	0x40010800

08000b2c <_ZNSt6bitsetILj4EEixEj>:
       *  required by that DR's resolution.  -pme
       *  The DR has since been changed:  range-checking is a precondition
       *  (users' responsibility), and these functions must not throw.  -pme
       */
      reference
      operator[](size_t __position)
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
      { return reference(*this, __position); }
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	68b9      	ldr	r1, [r7, #8]
 8000b3c:	68f8      	ldr	r0, [r7, #12]
 8000b3e:	f000 f825 	bl	8000b8c <_ZNSt6bitsetILj4EE9referenceC1ERS0_j>
 8000b42:	68f8      	ldr	r0, [r7, #12]
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <_ZNSt6bitsetILj4EE9referenceD1Ev>:
	~reference() _GLIBCXX_NOEXCEPT
 8000b4a:	b480      	push	{r7}
 8000b4c:	b083      	sub	sp, #12
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
	{ }
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4618      	mov	r0, r3
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr

08000b5e <_ZNKSt6bitsetILj4EE9referencecvbEv>:
	operator bool() const _GLIBCXX_NOEXCEPT
 8000b5e:	b590      	push	{r4, r7, lr}
 8000b60:	b083      	sub	sp, #12
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
	{ return (*(_M_wp) & _Base::_S_maskbit(_M_bpos)) != 0; }
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	681c      	ldr	r4, [r3, #0]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff fc3a 	bl	80003ea <_ZNSt12_Base_bitsetILj1EE10_S_maskbitEj>
 8000b76:	4603      	mov	r3, r0
 8000b78:	4023      	ands	r3, r4
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	bf14      	ite	ne
 8000b7e:	2301      	movne	r3, #1
 8000b80:	2300      	moveq	r3, #0
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	4618      	mov	r0, r3
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd90      	pop	{r4, r7, pc}

08000b8c <_ZNSt6bitsetILj4EE9referenceC1ERS0_j>:
	reference(bitset& __b, size_t __pos) _GLIBCXX_NOEXCEPT
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
	  _M_wp = &__b._M_getword(__pos);
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	6879      	ldr	r1, [r7, #4]
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff fc32 	bl	8000406 <_ZNSt12_Base_bitsetILj1EE10_M_getwordEj>
 8000ba2:	4602      	mov	r2, r0
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	601a      	str	r2, [r3, #0]
	  _M_bpos = _Base::_S_whichbit(__pos);
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f7ff fc12 	bl	80003d2 <_ZNSt12_Base_bitsetILj1EE11_S_whichbitEj>
 8000bae:	4602      	mov	r2, r0
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	605a      	str	r2, [r3, #4]
	}
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bf8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000bc4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000bc6:	e003      	b.n	8000bd0 <LoopCopyDataInit>

08000bc8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8000bca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000bcc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000bce:	3104      	adds	r1, #4

08000bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000bd0:	480b      	ldr	r0, [pc, #44]	; (8000c00 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8000bd4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000bd6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000bd8:	d3f6      	bcc.n	8000bc8 <CopyDataInit>
	ldr	r2, =_sbss
 8000bda:	4a0b      	ldr	r2, [pc, #44]	; (8000c08 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8000bdc:	e002      	b.n	8000be4 <LoopFillZerobss>

08000bde <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000bde:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000be0:	f842 3b04 	str.w	r3, [r2], #4

08000be4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000be4:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8000be6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000be8:	d3f9      	bcc.n	8000bde <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bea:	f000 f837 	bl	8000c5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bee:	f000 fa37 	bl	8001060 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bf2:	f7ff ff61 	bl	8000ab8 <main>
	bx	lr
 8000bf6:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bf8:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8000bfc:	080010d8 	.word	0x080010d8
	ldr	r0, =_sdata
 8000c00:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c04:	20000000 	.word	0x20000000
	ldr	r2, =_sbss
 8000c08:	20000000 	.word	0x20000000
	ldr	r3, = _ebss
 8000c0c:	200000c0 	.word	0x200000c0

08000c10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c10:	e7fe      	b.n	8000c10 <ADC1_2_IRQHandler>

08000c12 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr

08000c1e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000c22:	e7fe      	b.n	8000c22 <HardFault_Handler+0x4>

08000c24 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <MemManage_Handler+0x4>

08000c2a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <BusFault_Handler+0x4>

08000c30 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <UsageFault_Handler+0x4>

08000c36 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bc80      	pop	{r7}
 8000c40:	4770      	bx	lr

08000c42 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0
}
 8000c46:	bf00      	nop
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bc80      	pop	{r7}
 8000c4c:	4770      	bx	lr

08000c4e <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
}
 8000c52:	bf00      	nop
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bc80      	pop	{r7}
 8000c58:	4770      	bx	lr
	...

08000c5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000c60:	4a15      	ldr	r2, [pc, #84]	; (8000cb8 <SystemInit+0x5c>)
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <SystemInit+0x5c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000c6c:	4912      	ldr	r1, [pc, #72]	; (8000cb8 <SystemInit+0x5c>)
 8000c6e:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <SystemInit+0x5c>)
 8000c70:	685a      	ldr	r2, [r3, #4]
 8000c72:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <SystemInit+0x60>)
 8000c74:	4013      	ands	r3, r2
 8000c76:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000c78:	4a0f      	ldr	r2, [pc, #60]	; (8000cb8 <SystemInit+0x5c>)
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <SystemInit+0x5c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c86:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000c88:	4a0b      	ldr	r2, [pc, #44]	; (8000cb8 <SystemInit+0x5c>)
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <SystemInit+0x5c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c92:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000c94:	4a08      	ldr	r2, [pc, #32]	; (8000cb8 <SystemInit+0x5c>)
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <SystemInit+0x5c>)
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000c9e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000ca0:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <SystemInit+0x5c>)
 8000ca2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000ca6:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000ca8:	f000 f80c 	bl	8000cc4 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000cac:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <SystemInit+0x64>)
 8000cae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cb2:	609a      	str	r2, [r3, #8]
#endif 
}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	f8ff0000 	.word	0xf8ff0000
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000cc8:	f000 f802 	bl	8000cd0 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	2300      	movs	r3, #0
 8000cdc:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000cde:	4a3a      	ldr	r2, [pc, #232]	; (8000dc8 <SetSysClockTo72+0xf8>)
 8000ce0:	4b39      	ldr	r3, [pc, #228]	; (8000dc8 <SetSysClockTo72+0xf8>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ce8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000cea:	4b37      	ldr	r3, [pc, #220]	; (8000dc8 <SetSysClockTo72+0xf8>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cf2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d103      	bne.n	8000d08 <SetSysClockTo72+0x38>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000d06:	d1f0      	bne.n	8000cea <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000d08:	4b2f      	ldr	r3, [pc, #188]	; (8000dc8 <SetSysClockTo72+0xf8>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d002      	beq.n	8000d1a <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000d14:	2301      	movs	r3, #1
 8000d16:	603b      	str	r3, [r7, #0]
 8000d18:	e001      	b.n	8000d1e <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d14b      	bne.n	8000dbc <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000d24:	4a29      	ldr	r2, [pc, #164]	; (8000dcc <SetSysClockTo72+0xfc>)
 8000d26:	4b29      	ldr	r3, [pc, #164]	; (8000dcc <SetSysClockTo72+0xfc>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f043 0310 	orr.w	r3, r3, #16
 8000d2e:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000d30:	4a26      	ldr	r2, [pc, #152]	; (8000dcc <SetSysClockTo72+0xfc>)
 8000d32:	4b26      	ldr	r3, [pc, #152]	; (8000dcc <SetSysClockTo72+0xfc>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f023 0303 	bic.w	r3, r3, #3
 8000d3a:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000d3c:	4a23      	ldr	r2, [pc, #140]	; (8000dcc <SetSysClockTo72+0xfc>)
 8000d3e:	4b23      	ldr	r3, [pc, #140]	; (8000dcc <SetSysClockTo72+0xfc>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f043 0302 	orr.w	r3, r3, #2
 8000d46:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000d48:	4a1f      	ldr	r2, [pc, #124]	; (8000dc8 <SetSysClockTo72+0xf8>)
 8000d4a:	4b1f      	ldr	r3, [pc, #124]	; (8000dc8 <SetSysClockTo72+0xf8>)
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000d50:	4a1d      	ldr	r2, [pc, #116]	; (8000dc8 <SetSysClockTo72+0xf8>)
 8000d52:	4b1d      	ldr	r3, [pc, #116]	; (8000dc8 <SetSysClockTo72+0xf8>)
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000d58:	4a1b      	ldr	r2, [pc, #108]	; (8000dc8 <SetSysClockTo72+0xf8>)
 8000d5a:	4b1b      	ldr	r3, [pc, #108]	; (8000dc8 <SetSysClockTo72+0xf8>)
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d62:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000d64:	4a18      	ldr	r2, [pc, #96]	; (8000dc8 <SetSysClockTo72+0xf8>)
 8000d66:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <SetSysClockTo72+0xf8>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000d6e:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000d70:	4a15      	ldr	r2, [pc, #84]	; (8000dc8 <SetSysClockTo72+0xf8>)
 8000d72:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <SetSysClockTo72+0xf8>)
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8000d7a:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000d7c:	4a12      	ldr	r2, [pc, #72]	; (8000dc8 <SetSysClockTo72+0xf8>)
 8000d7e:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <SetSysClockTo72+0xf8>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d86:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000d88:	bf00      	nop
 8000d8a:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <SetSysClockTo72+0xf8>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d0f9      	beq.n	8000d8a <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000d96:	4a0c      	ldr	r2, [pc, #48]	; (8000dc8 <SetSysClockTo72+0xf8>)
 8000d98:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <SetSysClockTo72+0xf8>)
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f023 0303 	bic.w	r3, r3, #3
 8000da0:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000da2:	4a09      	ldr	r2, [pc, #36]	; (8000dc8 <SetSysClockTo72+0xf8>)
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <SetSysClockTo72+0xf8>)
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f043 0302 	orr.w	r3, r3, #2
 8000dac:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000dae:	bf00      	nop
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <SetSysClockTo72+0xf8>)
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f003 030c 	and.w	r3, r3, #12
 8000db8:	2b08      	cmp	r3, #8
 8000dba:	d1f9      	bne.n	8000db0 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8000dbc:	bf00      	nop
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bc80      	pop	{r7}
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	40022000 	.word	0x40022000

08000dd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 8000dd0:	4b24      	ldr	r3, [pc, #144]	; (8000e64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	07d0      	lsls	r0, r2, #31
 8000dd6:	bf5c      	itt	pl
 8000dd8:	2201      	movpl	r2, #1
 8000dda:	601a      	strpl	r2, [r3, #0]
 8000ddc:	4b22      	ldr	r3, [pc, #136]	; (8000e68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	07d1      	lsls	r1, r2, #31
 8000de2:	bf5c      	itt	pl
 8000de4:	2201      	movpl	r2, #1
 8000de6:	601a      	strpl	r2, [r3, #0]
 8000de8:	4b20      	ldr	r3, [pc, #128]	; (8000e6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	07d2      	lsls	r2, r2, #31
 8000dee:	bf5c      	itt	pl
 8000df0:	2201      	movpl	r2, #1
 8000df2:	601a      	strpl	r2, [r3, #0]
 8000df4:	4b1e      	ldr	r3, [pc, #120]	; (8000e70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	07d0      	lsls	r0, r2, #31
 8000dfa:	bf5c      	itt	pl
 8000dfc:	2201      	movpl	r2, #1
 8000dfe:	601a      	strpl	r2, [r3, #0]
 8000e00:	4b1c      	ldr	r3, [pc, #112]	; (8000e74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	07d1      	lsls	r1, r2, #31
 8000e06:	bf5c      	itt	pl
 8000e08:	2201      	movpl	r2, #1
 8000e0a:	601a      	strpl	r2, [r3, #0]
 8000e0c:	4b1a      	ldr	r3, [pc, #104]	; (8000e78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	07d2      	lsls	r2, r2, #31
 8000e12:	bf5c      	itt	pl
 8000e14:	2201      	movpl	r2, #1
 8000e16:	601a      	strpl	r2, [r3, #0]
 8000e18:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	07d0      	lsls	r0, r2, #31
 8000e1e:	bf5c      	itt	pl
 8000e20:	2201      	movpl	r2, #1
 8000e22:	601a      	strpl	r2, [r3, #0]
 8000e24:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	07d1      	lsls	r1, r2, #31
 8000e2a:	bf5c      	itt	pl
 8000e2c:	2201      	movpl	r2, #1
 8000e2e:	601a      	strpl	r2, [r3, #0]
 8000e30:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	07d2      	lsls	r2, r2, #31
 8000e36:	bf5c      	itt	pl
 8000e38:	2201      	movpl	r2, #1
 8000e3a:	601a      	strpl	r2, [r3, #0]
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	07d0      	lsls	r0, r2, #31
 8000e42:	bf5c      	itt	pl
 8000e44:	2201      	movpl	r2, #1
 8000e46:	601a      	strpl	r2, [r3, #0]
 8000e48:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	07d1      	lsls	r1, r2, #31
 8000e4e:	bf5c      	itt	pl
 8000e50:	2201      	movpl	r2, #1
 8000e52:	601a      	strpl	r2, [r3, #0]
 8000e54:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	07d2      	lsls	r2, r2, #31
 8000e5a:	bf5c      	itt	pl
 8000e5c:	2201      	movpl	r2, #1
 8000e5e:	601a      	strpl	r2, [r3, #0]
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	2000004c 	.word	0x2000004c
 8000e68:	20000048 	.word	0x20000048
 8000e6c:	20000044 	.word	0x20000044
 8000e70:	20000040 	.word	0x20000040
 8000e74:	2000003c 	.word	0x2000003c
 8000e78:	20000038 	.word	0x20000038
 8000e7c:	20000034 	.word	0x20000034
 8000e80:	20000030 	.word	0x20000030
 8000e84:	2000002c 	.word	0x2000002c
 8000e88:	20000028 	.word	0x20000028
 8000e8c:	20000024 	.word	0x20000024
 8000e90:	20000020 	.word	0x20000020

08000e94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8000e94:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	07d1      	lsls	r1, r2, #31
 8000e9a:	bf5c      	itt	pl
 8000e9c:	2201      	movpl	r2, #1
 8000e9e:	601a      	strpl	r2, [r3, #0]
 8000ea0:	4b16      	ldr	r3, [pc, #88]	; (8000efc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	07d2      	lsls	r2, r2, #31
 8000ea6:	bf5c      	itt	pl
 8000ea8:	2201      	movpl	r2, #1
 8000eaa:	601a      	strpl	r2, [r3, #0]
 8000eac:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	07d0      	lsls	r0, r2, #31
 8000eb2:	bf5c      	itt	pl
 8000eb4:	2201      	movpl	r2, #1
 8000eb6:	601a      	strpl	r2, [r3, #0]
 8000eb8:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	07d1      	lsls	r1, r2, #31
 8000ebe:	bf5c      	itt	pl
 8000ec0:	2201      	movpl	r2, #1
 8000ec2:	601a      	strpl	r2, [r3, #0]
 8000ec4:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	07d2      	lsls	r2, r2, #31
 8000eca:	bf5c      	itt	pl
 8000ecc:	2201      	movpl	r2, #1
 8000ece:	601a      	strpl	r2, [r3, #0]
 8000ed0:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	07d0      	lsls	r0, r2, #31
 8000ed6:	bf5c      	itt	pl
 8000ed8:	2201      	movpl	r2, #1
 8000eda:	601a      	strpl	r2, [r3, #0]
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	07d1      	lsls	r1, r2, #31
 8000ee2:	bf5c      	itt	pl
 8000ee4:	2201      	movpl	r2, #1
 8000ee6:	601a      	strpl	r2, [r3, #0]
 8000ee8:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	07d2      	lsls	r2, r2, #31
 8000eee:	bf5c      	itt	pl
 8000ef0:	2201      	movpl	r2, #1
 8000ef2:	601a      	strpl	r2, [r3, #0]
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	2000006c 	.word	0x2000006c
 8000efc:	20000068 	.word	0x20000068
 8000f00:	20000064 	.word	0x20000064
 8000f04:	20000060 	.word	0x20000060
 8000f08:	2000005c 	.word	0x2000005c
 8000f0c:	20000058 	.word	0x20000058
 8000f10:	20000054 	.word	0x20000054
 8000f14:	20000050 	.word	0x20000050

08000f18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 8000f18:	4b24      	ldr	r3, [pc, #144]	; (8000fac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	07d0      	lsls	r0, r2, #31
 8000f1e:	bf5c      	itt	pl
 8000f20:	2201      	movpl	r2, #1
 8000f22:	601a      	strpl	r2, [r3, #0]
 8000f24:	4b22      	ldr	r3, [pc, #136]	; (8000fb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	07d1      	lsls	r1, r2, #31
 8000f2a:	bf5c      	itt	pl
 8000f2c:	2201      	movpl	r2, #1
 8000f2e:	601a      	strpl	r2, [r3, #0]
 8000f30:	4b20      	ldr	r3, [pc, #128]	; (8000fb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	07d2      	lsls	r2, r2, #31
 8000f36:	bf5c      	itt	pl
 8000f38:	2201      	movpl	r2, #1
 8000f3a:	601a      	strpl	r2, [r3, #0]
 8000f3c:	4b1e      	ldr	r3, [pc, #120]	; (8000fb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	07d0      	lsls	r0, r2, #31
 8000f42:	bf5c      	itt	pl
 8000f44:	2201      	movpl	r2, #1
 8000f46:	601a      	strpl	r2, [r3, #0]
 8000f48:	4b1c      	ldr	r3, [pc, #112]	; (8000fbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	07d1      	lsls	r1, r2, #31
 8000f4e:	bf5c      	itt	pl
 8000f50:	2201      	movpl	r2, #1
 8000f52:	601a      	strpl	r2, [r3, #0]
 8000f54:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	07d2      	lsls	r2, r2, #31
 8000f5a:	bf5c      	itt	pl
 8000f5c:	2201      	movpl	r2, #1
 8000f5e:	601a      	strpl	r2, [r3, #0]
 8000f60:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	07d0      	lsls	r0, r2, #31
 8000f66:	bf5c      	itt	pl
 8000f68:	2201      	movpl	r2, #1
 8000f6a:	601a      	strpl	r2, [r3, #0]
 8000f6c:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	07d1      	lsls	r1, r2, #31
 8000f72:	bf5c      	itt	pl
 8000f74:	2201      	movpl	r2, #1
 8000f76:	601a      	strpl	r2, [r3, #0]
 8000f78:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	07d2      	lsls	r2, r2, #31
 8000f7e:	bf5c      	itt	pl
 8000f80:	2201      	movpl	r2, #1
 8000f82:	601a      	strpl	r2, [r3, #0]
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	07d0      	lsls	r0, r2, #31
 8000f8a:	bf5c      	itt	pl
 8000f8c:	2201      	movpl	r2, #1
 8000f8e:	601a      	strpl	r2, [r3, #0]
 8000f90:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	07d1      	lsls	r1, r2, #31
 8000f96:	bf5c      	itt	pl
 8000f98:	2201      	movpl	r2, #1
 8000f9a:	601a      	strpl	r2, [r3, #0]
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	07d2      	lsls	r2, r2, #31
 8000fa2:	bf5c      	itt	pl
 8000fa4:	2201      	movpl	r2, #1
 8000fa6:	601a      	strpl	r2, [r3, #0]
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	2000009c 	.word	0x2000009c
 8000fb0:	20000098 	.word	0x20000098
 8000fb4:	20000094 	.word	0x20000094
 8000fb8:	20000090 	.word	0x20000090
 8000fbc:	2000008c 	.word	0x2000008c
 8000fc0:	20000088 	.word	0x20000088
 8000fc4:	20000084 	.word	0x20000084
 8000fc8:	20000080 	.word	0x20000080
 8000fcc:	2000007c 	.word	0x2000007c
 8000fd0:	20000078 	.word	0x20000078
 8000fd4:	20000074 	.word	0x20000074
 8000fd8:	20000070 	.word	0x20000070

08000fdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8000fdc:	4b18      	ldr	r3, [pc, #96]	; (8001040 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	07d1      	lsls	r1, r2, #31
 8000fe2:	bf5c      	itt	pl
 8000fe4:	2201      	movpl	r2, #1
 8000fe6:	601a      	strpl	r2, [r3, #0]
 8000fe8:	4b16      	ldr	r3, [pc, #88]	; (8001044 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	07d2      	lsls	r2, r2, #31
 8000fee:	bf5c      	itt	pl
 8000ff0:	2201      	movpl	r2, #1
 8000ff2:	601a      	strpl	r2, [r3, #0]
 8000ff4:	4b14      	ldr	r3, [pc, #80]	; (8001048 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	07d0      	lsls	r0, r2, #31
 8000ffa:	bf5c      	itt	pl
 8000ffc:	2201      	movpl	r2, #1
 8000ffe:	601a      	strpl	r2, [r3, #0]
 8001000:	4b12      	ldr	r3, [pc, #72]	; (800104c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	07d1      	lsls	r1, r2, #31
 8001006:	bf5c      	itt	pl
 8001008:	2201      	movpl	r2, #1
 800100a:	601a      	strpl	r2, [r3, #0]
 800100c:	4b10      	ldr	r3, [pc, #64]	; (8001050 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	07d2      	lsls	r2, r2, #31
 8001012:	bf5c      	itt	pl
 8001014:	2201      	movpl	r2, #1
 8001016:	601a      	strpl	r2, [r3, #0]
 8001018:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	07d0      	lsls	r0, r2, #31
 800101e:	bf5c      	itt	pl
 8001020:	2201      	movpl	r2, #1
 8001022:	601a      	strpl	r2, [r3, #0]
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	07d1      	lsls	r1, r2, #31
 800102a:	bf5c      	itt	pl
 800102c:	2201      	movpl	r2, #1
 800102e:	601a      	strpl	r2, [r3, #0]
 8001030:	4b0a      	ldr	r3, [pc, #40]	; (800105c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	07d2      	lsls	r2, r2, #31
 8001036:	bf5c      	itt	pl
 8001038:	2201      	movpl	r2, #1
 800103a:	601a      	strpl	r2, [r3, #0]
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	200000bc 	.word	0x200000bc
 8001044:	200000b8 	.word	0x200000b8
 8001048:	200000b4 	.word	0x200000b4
 800104c:	200000b0 	.word	0x200000b0
 8001050:	200000ac 	.word	0x200000ac
 8001054:	200000a8 	.word	0x200000a8
 8001058:	200000a4 	.word	0x200000a4
 800105c:	200000a0 	.word	0x200000a0

08001060 <__libc_init_array>:
 8001060:	b570      	push	{r4, r5, r6, lr}
 8001062:	2500      	movs	r5, #0
 8001064:	4e0c      	ldr	r6, [pc, #48]	; (8001098 <__libc_init_array+0x38>)
 8001066:	4c0d      	ldr	r4, [pc, #52]	; (800109c <__libc_init_array+0x3c>)
 8001068:	1ba4      	subs	r4, r4, r6
 800106a:	10a4      	asrs	r4, r4, #2
 800106c:	42a5      	cmp	r5, r4
 800106e:	d109      	bne.n	8001084 <__libc_init_array+0x24>
 8001070:	f000 f81a 	bl	80010a8 <_init>
 8001074:	2500      	movs	r5, #0
 8001076:	4e0a      	ldr	r6, [pc, #40]	; (80010a0 <__libc_init_array+0x40>)
 8001078:	4c0a      	ldr	r4, [pc, #40]	; (80010a4 <__libc_init_array+0x44>)
 800107a:	1ba4      	subs	r4, r4, r6
 800107c:	10a4      	asrs	r4, r4, #2
 800107e:	42a5      	cmp	r5, r4
 8001080:	d105      	bne.n	800108e <__libc_init_array+0x2e>
 8001082:	bd70      	pop	{r4, r5, r6, pc}
 8001084:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001088:	4798      	blx	r3
 800108a:	3501      	adds	r5, #1
 800108c:	e7ee      	b.n	800106c <__libc_init_array+0xc>
 800108e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001092:	4798      	blx	r3
 8001094:	3501      	adds	r5, #1
 8001096:	e7f2      	b.n	800107e <__libc_init_array+0x1e>
 8001098:	080010c0 	.word	0x080010c0
 800109c:	080010c0 	.word	0x080010c0
 80010a0:	080010c0 	.word	0x080010c0
 80010a4:	080010d4 	.word	0x080010d4

080010a8 <_init>:
 80010a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010aa:	bf00      	nop
 80010ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010ae:	bc08      	pop	{r3}
 80010b0:	469e      	mov	lr, r3
 80010b2:	4770      	bx	lr

080010b4 <_fini>:
 80010b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010b6:	bf00      	nop
 80010b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010ba:	bc08      	pop	{r3}
 80010bc:	469e      	mov	lr, r3
 80010be:	4770      	bx	lr
